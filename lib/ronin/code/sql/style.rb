#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

module Ronin
  module Code
    module SQL
      module Style
        # Default case preference
        DEFAULT_CASE = :none

        # Default quoting preference
        DEFAULT_QUOTES = :single

        # Default parenthesis preference
        DEFAULT_PARENS = :more

        # Controls the casing of keywords
        attr_accessor :case

        # Controls the quoting of strings
        attr_accessor :quotes

        # Controls whether all strings will be hex-escaped
        attr_accessor :hex_escape

        # Controls the amount of parenthesis surrounding lists
        attr_accessor :parens
        
        # Controls whether spaces are used to separate keywords
        attr_accessor :spaces

        #
        # Sets the style options.
        #
        # @param [Hash] options
        #   Style options.
        #
        # @option options [Symbol] :case (DEFAULT_CASE)
        #   Controls the case of keywords. May be either `:none`, `:lower`,
        #   `:upper` or `:random`
        #
        # @option options [Symbol] :quotes (DEFAULT_QUOTES)
        #   Controls the quoting style of strings. May be either `:single`
        #   or `:double`.
        #
        # @option options [Boolean] :hex_escape (false)
        #   Forces all Strings to be hex-escaped.
        #
        # @option options [Symbol] :parens (DEFAULT_PARENS)
        #   Reduces the amount of parenthesis when tokenizing lists.
        #   May be either `:less`, `:more`.
        #
        # @option options [Boolean] :spaces (true)
        #   Controls whether spaces are used to separate keywords,
        #   or other kinds of white-space.
        #
        # @since 0.3.0
        #
        def initialize(options={})
          @case       = options.fetch(:case,DEFAULT_CASE)
          @quotes     = options.fetch(:quotes,DEFAULT_QUOTES)
          @hex_escape = options.fetch(:hex_escape,false)
          @parens     = options.fetch(:parens,DEFAULT_PARENS)
          @spaces     = options.fetch(:spaces,true)
        end
      end
    end
  end
end
