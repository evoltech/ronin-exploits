#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/remote'
require 'ronin/model/has_default_port'
require 'ronin/network/mixins/udp'

module Ronin
  module Exploits
    class RemoteUDP < Remote

      include Model::HasDefaultPort
      include Network::Helpers::UDP

      #
      # Creates a new remote UDP exploit object.
      #
      # @yield []
      #   The given block will be used to create a new remote UDP exploit
      #   object.
      #
      # @return [RemoteUDP]
      #   The new remote UDP exploit object.
      #
      # @example
      #   ronin_remote_udp_exploit do
      #     cache do
      #       self.name = 'some remote UDP exploit'
      #       self.description = %{
      #         This is an example remote UDP exploit.
      #       }
      #     end
      #
      #     def build
      #     end
      #
      #     def deploy
      #     end
      #   end
      #
      contextify :ronin_remote_udp_exploit

      # Remote host to connect to
      parameter :host, :description => 'UDP remote host'

      # Remote port to connect to
      parameter :port, :description => 'UDP remote port'

      # Local host to bind to
      parameter :local_host, :description => 'UDP local host'

      # Local port to bind to
      parameter :local_port, :description => 'UDP local port'

      #
      # Verifies the UDP remote exploit is ready to be deployed.
      #
      def verify!
        require_params :host, :port

        return super
      end

      #
      # Verifies and deploys the UDP remote exploit.
      #
      # @yield [exploit]
      #   If a block is given, it will be passed the deployed exploit.
      #
      # @yieldparam [RemoteUDP] exploit
      #   The deployed exploit.
      #
      # @return [RemoteUDP]
      #   The deployed exploit.
      #
      # @raise [ExploitNotBuilt]
      #   The exploit has not been built, and cannot be deployed.
      #
      def deploy!(&block)
        @port ||= self.default_port

        super(&block)
      end

    end
  end
end
