#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

module Ronin
  module Exploits
    module Verifiers
      #
      # Verifies that a target has been selected.
      #
      # @return [true]
      #   Specifies that a target has been selected.
      #
      # @raise [TargetUnspecified]
      #   No suitable target was provided.
      #
      def verify_target!
        if target.nil?
          raise(TargetUnspecified,"no suitable target provided",caller)
        end

        return true
      end

      #
      # Verifies that the selected target has an arch property.
      #
      # @return [true]
      #   Specifies that an architecture is being targeted by the currently
      #   selected target.
      #
      # @raise [TargetDataMissing]
      #   A valid Arch was expected from the current target.
      #
      def verify_arch!
        if arch.nil?
          raise(TargetDataMissing,"no suitable arch was provided",caller)
        end

        return true
      end

      #
      # Verifies that the selected target has an os property.
      #
      # @return [true]
      #   Specifies that an OS is being targeted by the currently selected
      #   target.
      #
      # @raise [TargetDataMissing]
      #   A valid OS was expected from the current target.
      #
      def verify_os!
        if os.nil?
          raise(TargetDataMissing,"no suitable os was provided",caller)
        end

        return true
      end

      #
      # Verifies that the selected target has an product property.
      #
      # @return [true]
      #   Specifies that a product is being targeted by the currently
      #   selected target.
      #
      # @raise [TargetDataMissing]
      #   A valid product was expected from the current target.
      #
      def verify_product!
        if product.nil?
          raise(TargetDataMissing,"no suitable product was provided",caller)
        end

        return true
      end

      #
      # Reviews the text for restricted characters.
      #
      # @param [String] text
      #   The text to check for restricted characters within.
      #
      # @return [Boolean]
      #   Specifies whether the text contains any restricted characters.
      #
      def is_restricted?(text)
        text.each_byte do |b|
          return true if @restricted_chars.include?(b)
        end

        return false
      end

      #
      # Reviews text for restricted characters.
      #
      # @param [String] text
      #   The text to review for restricted characters.
      #
      # @return [true]
      #   Specifies that the text does not contain restricted characters.
      #
      # @raise [RestrictedChar]
      #   A restricted character was found in the specified text.
      #
      def verify_restricted!(text)
        found = @restricted_chars.select { |char|
          text.include?(char)
        }.map { |char| char.dump }

        unless found.empty?
          raise(RestrictedChar,"restricted characters #{found.join(', ')} was detected in #{text.dump}",caller)
        end

        return true
      end
    end
  end
end
