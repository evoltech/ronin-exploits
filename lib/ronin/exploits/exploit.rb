#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploits/exceptions/exploit_not_built'
require 'ronin/exploits/exploit_author'
require 'ronin/object_context'
require 'ronin/text/char_set'
require 'ronin/parameters'
require 'ronin/license'

module Ronin
  module Exploits
    class Exploit

      include ObjectContext
      include Parameters

      object_contextify :exploit

      # Name of the specific exploit
      property :name, String

      # Version of the exploit
      property :version, String

      # Description of the exploit
      property :description, String

      # Author(s) of the exploit
      has 0..n, :authors, :class_name => 'Ronin::Exploits::ExploitAuthor'

      # Content license
      belongs_to :license, :class_name => 'Ronin::License'

      # String to pad extra space with
      parameter :pad, :value => 'A', :description => 'padding string'

      # Exploit payload
      parameter :payload, :description => 'exploit payload'

      # Restricted pattern that may not occurr in the built exploit
      attr_accessor :restricted

      # Restricted characters that may not occurr in the built exploit
      attr_accessor :restricted_chars

      # Packaged exploit
      attr_reader :package

      def initialize(options={},&block)
        super(options)

        @restricted = []
        @restricted_chars = Text::CharSet.new

        block.call(self) if block
      end

      def author(options={},&block)
        authors << ExploitAuthor.new(options,&block)
      end

      def pad_buffer(padding,length)
        padding = padding.to_s

        buffer = (padding * (length / padding.length))
        pad_remaining = (length % padding.length)

        buffer += padding[0,pad_remaining] unless pad_remaining==0
        return buffer
      end

      def restrict(*patterns)
        @restricted += patterns.map do |pattern|
          unless pattern.kind_of?(Regexp)
            Regexp.new(pattern.to_s)
          else
            pattern
          end
        end
      end

      def restrict_chars(*chars)
        @restricted_chars += chars
      end

      def builder
      end

      def is_built?
        !(@package.nil? || @package.empty?)
      end

      def build
        @package = ''

        builder

        if @package
          @restricted_chars.each do |chr|
            if @package.include?(chr)
              raise(RestrictedText,"Restricted character '#{chr}' was found in the built exploit",caller)
            end
          end

          @restricted.each do |pattern|
            if @package =~ pattern
              raise(RestrictedText,"Restricted pattern '#{pattern.source}' was found in the built exploit",caller)
            end
          end
        end

        return @package
      end

      def cleaner
      end

      def is_clean?
        @package.nil?
      end

      def clean
        cleaner

        @package = nil
      end

      def launcher
      end

      def launch
        unless @package
          raise(ExploitNotBuilt,"cannot launch an unbuilt exploit",caller)
        end

        return launcher
      end

      def exploit
        build
        launch
        clean
      end

      def to_s
        return "#{@name}-#{@version}" if @version
        return @name.to_s
      end

    end
  end
end
