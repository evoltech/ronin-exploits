#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploits/exceptions/exploit_not_built'
require 'ronin/exploits/exploit_author'
require 'ronin/exploits/ability'
require 'ronin/exploits/requirement'
require 'ronin/exploits/impact'
require 'ronin/chars/char_set'
require 'ronin/object_context'
require 'ronin/parameters'
require 'ronin/license'

module Ronin
  module Exploits
    class Exploit

      include ObjectContext
      include Parameters

      object_contextify :exploit

      # Name of the exploit
      property :name, String, :index => true

      # Version of the exploit
      property :version, String, :default => '0.1', :index => true

      # Description of the exploit
      property :description, Text

      # Author(s) of the exploit
      has n, :authors, :class_name => 'ExploitAuthor'

      # The requirements of the exploit
      has n, :requirements

      # Impact of the exploit
      has n, :impact, :class_name => 'Impact'

      # Content license
      belongs_to :license

      # Validations
      validates_present :name
      validates_is_unique :version, :scope => [:name]

      # String to pad extra space with
      parameter :pad, :value => 'A', :description => 'padding string'

      # Exploit payload
      parameter :payload, :description => 'exploit payload'

      # Built payload
      attr_reader :built_payload

      # Restricted pattern that may not occurr in the built exploit
      attr_accessor :restricted

      # Restricted characters that may not occurr in the built exploit
      attr_accessor :restricted_chars

      # Packaged exploit
      attr_reader :package

      #
      # Creates a new Exploit object with the given _options_. If a _block_
      # is given, it will be passed the newly created Exploit object.
      #
      def initialize(options={},&block)
        super(options)

        @restricted = []
        @restricted_chars = Chars::CharSet.new

        block.call(self) if block
      end

      #
      # Finds all exploits with names like the specified _name_.
      #
      def self.named(name)
        self.all(:name.like => "%#{name}%")
      end

      #
      # Finds all exploits with descriptions like the specified
      # _description_.
      #
      def self.describing(description)
        self.all(:description.like => "%#{description}%")
      end

      #
      # Finds the exploit with the most recent vesion.
      #
      def self.latest
        self.first(:order => [:version.desc])
      end

      #
      # Adds an ExploitAuthor with the given _attributes_ to the exploit.
      # If a _block_ is given, it will be passed the ExploitAuthro object.
      #
      def author(attributes={},&block)
        self.authors << ExploitAuthor.first_or_create(attributes,&block)
      end

      #
      # Adds a new Requirement for the Ability with the specified _name_.
      #
      def requires(name)
        self.requirements << Requirement.new(
          :ability_id => Ability.named(name).id,
          :exploit_id => self.id
        )

        return self
      end

      #
      # Adds a new Impact granting the Ability with the specified _name_.
      #
      def allows(name)
        self.impact << Impact.new(
          :ability_id => Ability.named(name).id,
          :exploit_id => self.id
        )

        return self
      end

      #
      # Creates a padded buffer of the specified _length_ using the
      # specified _padding_ data.
      #
      def pad_buffer(padding,length)
        padding = padding.to_s

        buffer = (padding * (length / padding.length))
        pad_remaining = (length % padding.length)

        unless pad_remaining==0
          buffer += padding[0,pad_remaining]
        end

        return buffer
      end

      #
      # Adds the specified _patterns_ to the list of restricted patterns.
      #
      def restrict(*patterns)
        @restricted += patterns.map do |pattern|
          unless pattern.kind_of?(Regexp)
            Regexp.new(pattern.to_s)
          else
            pattern
          end
        end
      end

      #
      # Adds the given _chars_ to the restricted_chars.
      #
      def restrict_chars(*chars)
        @restricted_chars += chars
      end

      #
      # Default vulnerability test method, always returns +true+.
      #
      def vulnerable?
        true
      end

      #
      # Default builder method.
      #
      def builder
      end

      #
      # Returns +true+ if the exploit is built, returns +false+ otherwise.
      #
      def is_built?
        !(@package.nil? || @package.empty?)
      end

      #
      # Builds the exploit and checks for restricted characters or
      # patterns. If any restricted characters or patterns are found in
      # the built exploit, a RestrictedText exception will be raised.
      #
      def build
        @package = ''

        if @payload.kind_of?(Paylods::Payload)
          @payload.prepare(self)
          @built_payload = @payload.build
        else
          @built_payload = @payload
        end

        builder

        if @package
          @restricted_chars.each do |chr|
            if @package.include?(chr)
              raise(RestrictedText,"Restricted character '#{chr}' was found in the built exploit",caller)
            end
          end

          @restricted.each do |pattern|
            if @package =~ pattern
              raise(RestrictedText,"Restricted pattern '#{pattern.source}' was found in the built exploit",caller)
            end
          end
        end

        return @package
      end

      #
      # The default cleaner method.
      #
      def cleaner
      end

      #
      # Retuns +true+ if the exploit has been cleaned, returns +false+
      # otherwise.
      #
      def is_clean?
        @package == ''
      end

      #
      # Cleans the exploit.
      #
      def clean
        cleaner

        @built_payload = nil

        # clean the payload
        if @payload.kind_of?(Payloads::Payload)
          @payload.clean
        end

        @package = ''
      end

      #
      # Default exploit launcher method.
      #
      def launcher(&block)
      end

      #
      # Launches the exploit. If the exploit has not been previously
      # built, an ExploitNotBuilt exception will be raised.
      #
      def launch(&block)
        unless @package
          raise(ExploitNotBuilt,"cannot launch an unbuilt exploit",caller)
        end

        launcher()

        if @payload.kind_of?(Payloads::Payload)
          return @payload.launch(&block)
        end
      end

      #
      # Builds, launches and then cleans the exploit.
      #
      def exploit(&block)
        build()
        result = launch(&block)
        clean()

        return result
      end

      #
      # Returns the name and version of the exploit in String form.
      #
      def to_s
        return "#{@name} #{@version}" if @version
        return @name.to_s
      end

    end
  end
end
