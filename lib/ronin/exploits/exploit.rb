#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/exceptions/unknown_helper'
require 'ronin/exploits/exceptions/target_unspecified'
require 'ronin/exploits/exceptions/target_data_missing'
require 'ronin/exploits/exceptions/restricted_char'
require 'ronin/exploits/exceptions/exploit_not_built'
require 'ronin/exploits/license'
require 'ronin/exploits/verifiers'
require 'ronin/exploits/exploit_author'
require 'ronin/exploits/target'
require 'ronin/exploits/control'
require 'ronin/payloads/has_payload'
require 'ronin/payloads/payload'
require 'ronin/controls/behaviors'
require 'ronin/cacheable'
require 'ronin/model/has_name'
require 'ronin/model/has_description'
require 'ronin/model/has_version'
require 'ronin/model/has_license'
require 'ronin/ui/output/helpers'
require 'ronin/extensions/kernel'

require 'parameters'
require 'chars/char_set'

module Ronin
  module Exploits
    class Exploit

      include Parameters
      include Cacheable
      include Model::HasName
      include Model::HasDescription
      include Model::HasVersion
      include Model::HasLicense
      include Payloads::HasPayload
      include Controls::Behaviors
      include UI::Output::Helpers
      include Verifiers

      #
      # Creates a new Ronin::Exploits::Exploit object using the given
      # _block_.
      #
      #   ronin_exploit do
      #     ...
      #   end
      #
      contextify :ronin_exploit
      
      # Primary key of the exploit
      property :id, Serial

      # The status of the exploit (either, :potential, :proven or
      # :weaponized)
      property :status, Enum[
        :potential,
        :proven,
        :weaponized
      ], :default => :potential

      # The disclosure status of the exploit (any of, :private,
      # :vendor_aware, :in_wild and :public)
      property :disclosure, Flag[
        :private,
        :in_wild,
        :vendor_aware,
        :public
      ]

      # Author(s) of the exploit
      has n, :authors, :model => 'Ronin::Exploits::ExploitAuthor'

      # Behaviors that the exploit allows
      has n, :controls, :model => 'Ronin::Exploits::Control'

      # Targets for the exploit
      has n, :targets

      # Validations
      validates_present :name
      validates_is_unique :version, :scope => [:name]

      # Exploit target
      attr_writer :target

      # Characters to restrict
      attr_reader :restricted_chars

      # Encoders to run on the payload
      attr_reader :encoders

      # The raw unencoded payload
      attr_accessor :raw_payload

      # The encoded payload
      attr_accessor :encoded_payload

      #
      # Creates a new Exploit object.
      #
      # @param [Hash] attributes
      #   Additional attributes used to initialize the exploit's model
      #   attributes and parameters.
      #
      # @yield []
      #   If a block is given, it will be evaluated in the newly created
      #   Exploit object.
      #
      def initialize(attributes={},&block)
        super(attributes)

        initialize_params(attributes)

        @target = nil
        @built = false
        @deployed = false

        @restricted_chars = Chars::CharSet.new
        @encoders = []

        instance_eval(&block) if block
      end

      #
      # Adds a new author to the exploit.
      #
      # @param [Hash] attributes
      #   Additional attributes to create the ExploitAuthor object with.
      #
      # @yield [author]
      #   If a block is given, it will be passed the newly created author
      #   object.
      #
      # @yieldparam [ExploitAuthor] author
      #   The author object tied to the exploit.
      #
      # @example
      #   author :name => 'Anonymous',
      #          :email => 'anon@example.com',
      #          :organization => 'Anonymous LLC'
      #
      def author(attributes={},&block)
        self.authors << ExploitAuthor.new(attributes,&block)
      end

      #
      # Adds a new target to the exploit.
      #
      # @param [Hash] attributes
      #   Additional attributes to create the target with.
      #
      # @yield [target]
      #   If a block is given, it will be passed the newly created target.
      #
      # @yieldparam [Target] target
      #   The newly created target.
      #
      # @example
      #   targeting do |target|
      #     target.arch :i686
      #     target.os :name => 'Linux'
      #   end
      #
      def targeting(attributes={},&block)
        self.targets << Target.new(attributes,&block)
      end

      #
      # Adds new characters to the list of restricted characters.
      #
      # @param [Array<String>] chars
      #   The character to restrict.
      #
      # @return [Array<String>]
      #   The new list of restricted characters.
      #
      # @example
      #   restrict 0x00, "\n"
      #   # => #<Chars::CharSet: {"\0", "\n"}>
      #
      def restrict(*chars)
        @restricted_chars += chars
      end

      #
      # Adds a new encoder to the list of encoders to use for encoding the
      # payload.
      #
      # @param [#encode] encoder
      #   The payload encoder object to use.
      #   Must provide an encode method.
      #
      # @yield [payload]
      #   If a block is given, and an encoder object is not, the block will
      #   be used to encode the payload.
      #
      # @yieldparam [String] payload
      #   The payload to be encoded.
      #
      # @return [Array]
      #   The new list of encoders to use to encode the payload.
      #
      # @raise [RuntimeError]
      #   The payload encoder object does not provide an encode method.
      #
      # @raise [ArgumentError]
      #   Either a payload encoder object or a block can be given.
      #
      # @example
      #   exploit.encode_payload(some_encoder)
      #
      # @example
      #   exploit.encode_payload do |payload|
      #     # ...
      #   end
      #
      def encode_payload(encoder=nil,&block)
        if encoder
          unless encoder.respond_to?(:encode)
            raise(RuntimeError,"The payload encoder must provide an encode method",caller)
          end

          @encoders << encoder
        elsif (encoder.nil? && block)
          @encoders << block
        else
          raise(ArgumentError,"either a payload encoder or a block can be given",caller)
        end
      end

      #
      # Lists the behaviors controlled by the exploit and the payload, if
      # one is being used.
      #
      # @return [Array<Symbol>]
      #   The combined behaviors controlled by the exploit.
      #
      def behaviors
        total_behaviors = super

        if @payload
          total_behaviors = (total_behaviors + @payload.behaviors).uniq
        end

        return total_behaviors
      end

      #
      # @return [Array<Arch>]
      #   The targeted architectures.
      #
      def targeted_archs
        self.targets.map { |target| target.arch }.compact
      end

      #
      # @return [Array<OS>]
      #   The targeted OSes.
      #
      def targeted_oses
        self.targets.map { |target| target.os }.compact
      end

      #
      # @return [Array<Product>]
      #   The targeted Products.
      #
      def targeted_products
        self.targets.map { |target| target.product }.compact
      end

      #
      # Selects a target to use in exploitation.
      #
      # @param [Integer] index
      #   The index within #targets to select the target.
      #
      # @yield [target]
      #   If a block is given, it will be used to select the desired
      #   target from #targets.
      #
      # @yieldparam [Target] target
      #   The potential target to review.
      #
      # @example
      #   user_target!(2)
      #
      # @example
      #   use_target! { |target| target.arch == Arch.i686 }
      #
      # @since 0.3.0
      #
      def use_target!(index=0,&block)
        if block
          @target = self.targets.first(&block)
        else
          @target = self.targets[index]
        end
      end

      #
      # @return [Target]
      #   The current target to use in exploitation.
      #
      def target
        @target ||= self.targets.first
      end

      #
      # @return [Arch]
      #   The current targeted architecture.
      #
      def arch
        target.arch if target
      end

      #
      # @return [OS]
      #   The current targeted OS.
      #
      def os
        target.os if target
      end

      #
      # @return [Product]
      #   The current targeted product.
      #
      def product
        target.product if target
      end

      #
      # Associates a payload with the exploit, and the exploit with the
      # payload.
      #
      # @param [Payload] new_payload
      #   The new payload to associate with the exploit.
      #
      # @return [Payload]
      #   The new payload.
      #
      # @since 0.3.0
      #
      def payload=(new_payload)
        if (@payload && new_payload.nil?)
          @payload.exploit = nil
        end

        super(new_payload)

        if @payload
          print_info "Using payload: #{new_payload}"

          @payload.exploit = self
        end

        return @payload
      end

      #
      # Builds the current payload, saving the result to the +@raw_payload+
      # instance variable.
      #
      # @param [Hash] options
      #   Additional options to build the paylod with.
      #
      # @return [String]
      #   The built payload.
      #
      # @see Payload#build!
      # @since 0.3.0
      #
      def build_payload!(options={})
        if @payload
          @raw_payload = ''

          @payload.build!(options)
          @raw_payload = @payload.raw_payload
        else
          @raw_payload ||= ''
        end

        return @raw_payload
      end

      #
      # Encodes the current payload and saves the result in the
      # +@encoded_payload+ instance variable.
      #
      # @return [String]
      #   The encoded payload.
      #
      def encode_payload!
        @encoded_payload = @raw_payload.to_s

        @encoders.each do |encoder|
          print_debug "Encoding payload: #{@encoded_payload.dump}"

          new_payload = if encoder.respond_to?(:encode)
                          encoder.encode(@encoded_payload)
                        elsif encoder.respond_to?(:call)
                          encoder.call(@encoded_payload)
                        end

          @encoded_payload = (new_payload || @encoded_payload).to_s
        end

        return @encoded_payload
      end

      #
      # @return [Boolean]
      #   Specifies whether the exploit is built.
      #
      def built?
        @built == true
      end

      #
      # Builds the exploit and checks for restricted characters or patterns.
      #
      # @param [Hash] options
      #   Additional options to also use as parameters.
      #
      def build!(options={},&block)
        self.params = options

        print_debug "Exploit parameters: #{self.params.inspect}"

        @built = false

        build_payload!
        encode_payload!

        print_info "Building exploit ..."

        build
        
        print_info "Exploit built!"

        @built = true

        if block
          if block.arity == 1
            block.call(self)
          else
            block.call()
          end
        end

        return self
      end

      #
      # Verifies the exploit is built, properly configured, built and
      # ready deployment.
      #
      # @return [true]
      #   The exploit is built and ready for deployment.
      #
      # @raise [ExploitNotBuilt]
      #   The exploit has not been built, and cannot be deployed.
      #
      def verify!
        unless built?
          raise(ExploitNotBuilt,"cannot deploy an unbuilt exploit",caller)
        end

        print_info "Verifying exploit ..."

        verify

        print_info "Exploit verified!"
        return true
      end

      #
      # @return [Boolean]
      #   Specifies whether the exploit has previously been deployed.
      #
      def deployed?
        @deployed == true
      end

      #
      # Verifies then deploys the exploit. If a payload has been set,
      # the payload will also be deployed.
      #
      # @yield [exploit]
      #   If a block is given, it will be passed the deployed exploit.
      #
      # @yieldparam [Exploit] exploit
      #   The deployed exploit.
      #
      # @return [Exploit]
      #   The deployed exploit.
      #
      # @raise [ExploitNotBuilt]
      #   The exploit has not been built, and cannot be deployed.
      #
      def deploy!(&block)
        verify!

        print_info "Deploying exploit ..."
        @deployed = false

        deploy()

        print_info "Exploit deployed!"
        @deployed = true

        @payload.deploy!() if @payload

        if block
          if block.arity == 1
            block.call(self)
          else
            block.call()
          end
        end

        return self
      end

      #
      # Builds, verified and then deploys the exploit.
      #
      # @param [Hash] options
      #   Additional options to build the exploit with.
      #
      # @option options [Boolean] :dry_run (false)
      #   Specifies whether to do a dry-run of the exploit, where the
      #   exploit will be built, verified but *not* deployed.
      #
      # @yieldparam [Exploit] exploit
      #   The deployed exploit.
      #
      # @return [Exploit]
      #   The deployed exploit.
      #
      # @return [Exploit]
      #   The deployed exploit.
      #
      # @since 0.3.0
      #
      def exploit!(options={},&block)
        build!(options)

        unless options[:dry_run]
          deploy!(&block)
        end

        return self
      end

      #
      # Converts the exploit to a String.
      #
      # @return [String]
      #   The name and version of the exploit.
      #
      def to_s
        if (self.name && self.version)
          "#{self.name} #{self.version}"
        elsif self.name
          self.name
        elsif self.version
          self.version
        end
      end

      #
      # Inspects the contents of the exploit.
      #
      # @return [String]
      #   The inspected exploit.
      #
      def inspect
        str = "#{self.class}: #{self}"
        str << " #{self.params.inspect}" unless self.params.empty?

        return "#<#{str}>"
      end

      protected

      #
      # Extends the exploit with the helper module defined in
      # Ronin::Exploits::Helpers that has the similar name.
      #
      # @param [Symbol, String] name
      #   The snake-case name of the exploit helper to load and extend the
      #   exploit with.
      #
      # @return [true]
      #   The exploit helper was successfully loaded.
      #
      # @raise [UnknownHelper]
      #   No valid helper module could be found or loaded with the similar
      #   name.
      #
      # @example
      #   helper :buffer_overflow
      #
      def helper(name)
        name = name.to_s
        module_name = name.to_const_string

        begin
          require_within File.join('ronin','exploits','helpers'), name
        rescue Gem::LoadError => e
          raise(e)
        rescue ::LoadError
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        unless Ronin::Exploits::Helpers.const_defined?(module_name)
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        helper_module = Ronin::Exploits::Helpers.const_get(module_name)

        unless helper_module.kind_of?(Module)
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        extend helper_module
        return true
      end

      #
      # Reviews the text for restricted characters.
      #
      # @param [String] text
      #   The text to check for restricted characters within.
      #
      # @return [Boolean]
      #   Specifies whether the text contains any restricted characters.
      #
      def is_restricted?(text)
        text.each_byte do |b|
          return true if @restricted_chars.include?(b)
        end

        return false
      end

      #
      # Default build method.
      #
      def build
      end

      #
      # Default exploit verify method.
      #
      def verify
      end

      #
      # Default exploit deploy method.
      #
      def deploy(&block)
        block.call(self) if block
      end

      #
      # Relays method calls to the payload, if the payload is a kind of 
      # Ronin::Payloads::Payload.
      #
      # @since 0.3.0
      #
      def method_missing(name,*arguments,&block)
        if @payload.kind_of?(Ronin::Payloads::Payload)
          return @payload.send(name,*arguments,&block)
        end

        super(name,*arguments,&block)
      end

    end
  end
end
