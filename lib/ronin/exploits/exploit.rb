#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/exceptions/unknown_helper'
require 'ronin/exploits/exceptions/target_unspecified'
require 'ronin/exploits/exceptions/target_data_missing'
require 'ronin/exploits/exceptions/restricted_char'
require 'ronin/exploits/exceptions/exploit_not_built'
require 'ronin/exploits/exceptions/deploy_failed'
require 'ronin/exploits/verifiers'
require 'ronin/exploits/exploit_author'
require 'ronin/exploits/target'
require 'ronin/exploits/controlled_behavior'
require 'ronin/exploits/helpers'
require 'ronin/payloads/has_payload'
require 'ronin/payloads/payload'
require 'ronin/control/api'
require 'ronin/model/has_name'
require 'ronin/model/has_description'
require 'ronin/model/has_version'
require 'ronin/model/has_license'
require 'ronin/cacheable'
require 'ronin/ui/output/helpers'
require 'ronin/extensions/kernel'

require 'parameters'
require 'chars/char_set'

module Ronin
  module Exploits
    #
    # The {Exploit} class allows for describing exploits for security
    # vulnerabilities, purely in Ruby. Exploits contain metadata about the
    # exploit/vulnerability and the methods which defines the functionality
    # of the exploit.
    #
    # ## Metadata
    # 
    # An {Exploit} is described via metadata, which is cached into the
    # database. The cacheable metadata must be defined within a `cache`
    # block, so that the metadata is set only before the exploit is cached:
    #
    #     cache do
    #       self.name = 'FailTTPd 0.2.6b Buffer Overflow'
    #       self.version = '0.2'
    #       self.description = %{
    #         FailHTTPd 0.2.6b contains a buffer overflow in it's handling
    #         of the TRACE request.
    #       }
    #
    #       # ...
    #     end
    #
    # ### License
    #
    # An {Exploit} may associate with a specific software license
    # using the `license!` method:
    #
    #     license! :cc_sa_by
    #
    # ### Authors
    #
    # An {Exploit} may have one or more authors which contributed to the
    # exploit, using the {#author} method:
    #
    #     author(:name => 'evoltech', :organization => 'HackBloc')
    #
    #     author(:name => 'postmodern', :organization => 'SophSec')
    #
    # ### Status
    #
    # An {Exploit} has a specific development status, which describes
    # the reliability of the exploit:
    #
    #     self.status = :proven
    #
    # The {#status} property may be one of the following values:
    #
    # * `:potential`
    # * `:proven`
    # * `:weaponized`
    #
    # ### Disclosure
    #
    # An {Exploit} may specify it's current disclosure status:
    #
    #     self.disclosure = [:in_wild, :vendor_aware]
    #
    # The {#disclosure} property may be one or more of the following values:
    #
    # * `:private`
    # * `:in_wild`
    # * `:vendor_aware`
    # * `:public`
    #
    # ### Targets
    #
    # An {Exploit} may have one or more targets, which discribe the
    # Architectures, Operating Systems and Products the exploit targets.
    # Each target may also define extra data that is specific to that
    # target.
    #
    #     targeting do |t|
    #       t.arch! :i686
    #       t.os! :name => 'Linux'
    #       t.product! :name => 'FailTTPd', :version => '0.2.6b'
    #
    #       # target specific data
    #       t.data = {:value1 => 0x03c1, :value2 => 0xa0}
    #     end
    #
    # ## Methods
    #
    # The functionality of an {Exploit} is defined by three main methods.
    #
    # * `build` - Handles building the exploit.
    # * `verify` - Optional method which handles verifying a built exploit.
    # * `deploy` - Handles deploying a built and verified exploit
    #   against a host.
    #
    # The `build`, `verify`, `deploy` methods can be invoked individually
    # using the {#build!}, {#verify!}, {#deploy!} methods, respectively.
    # Additionally, the {#exploit!} method will accept additional
    # parameter values and will call {#build!}, {#verify!}, {#deploy!},
    # in that order.
    #
    # ### Helpers
    #
    # Helper modules define additional methods for various exploitation
    # techniques. The helper modules are loaded from the
    # `ronin/exploits/helpers` directory, and extended into the exploit
    # using the {#helper} method:
    #
    #     helper :buffer_overflow
    #
    class Exploit

      include Parameters
      include Cacheable
      include Model::HasName
      include Model::HasDescription
      include Model::HasVersion
      include Model::HasLicense
      include Payloads::HasPayload
      include Verifiers
      include Control::API
      include UI::Output::Helpers

      # The directory to load exploit helpers from.
      HELPERS_DIR = File.join('ronin','exploits','helpers')

      #
      # Creates a new exploit object.
      #
      # @yield []
      #   The given block will be used to create a new exploit object.
      #
      # @return [Exploit]
      #   The new exploit object.
      #
      # @example
      #   ronin_exploit do
      #     cache do
      #       self.name = 'some exploit'
      #       self.description = %{
      #         This is an example exploit.
      #       }
      #     end
      #
      #     def build
      #     end
      #
      #     def deploy
      #     end
      #   end
      #
      contextify :ronin_exploit
      
      # Primary key of the exploit
      property :id, Serial

      # The status of the exploit (either, `:potential`, `:proven` or
      # `:weaponized`)
      property :status, Enum[
        :potential,
        :proven,
        :weaponized
      ], :default => :potential

      # The disclosure status of the exploit (any of, `:private`,
      # `:vendor_aware`, `:in_wild` and `:public`)
      property :disclosure, Flag[
        :private,
        :in_wild,
        :vendor_aware,
        :public
      ]

      # Author(s) of the exploit
      has 0..n, :authors, :model => 'Ronin::Exploits::ExploitAuthor'

      # Behaviors that the exploit controls
      has 0..n, :controlled_behaviors

      # Targets for the exploit
      has 0..n, :targets

      # Validations
      validates_present :name
      validates_is_unique :version, :scope => [:name]

      # Exploit target
      attr_writer :target

      # Characters to restrict
      attr_reader :restricted_chars

      # Encoders to run on the payload
      attr_reader :encoders

      # The raw unencoded payload
      attr_reader :raw_payload

      # The encoded payload
      attr_reader :encoded_payload

      #
      # Creates a new Exploit object.
      #
      # @param [Hash] attributes
      #   Additional attributes used to initialize the exploit's model
      #   attributes and parameters.
      #
      # @yield []
      #   If a block is given, it will be evaluated in the newly created
      #   Exploit object.
      #
      def initialize(attributes={},&block)
        super(attributes)

        initialize_params(attributes)

        @target = nil
        @built = false
        @deployed = false

        @restricted_chars = Chars::CharSet.new
        @encoders = []

        instance_eval(&block) if block
      end

      #
      # Finds all exploits written by a specific author.
      #
      # @param [String] name
      #   The name of the author.
      #
      # @return [Array<Exploit>]
      #   The exploits written by the author.
      #
      def self.written_by(name)
        all(self.authors.name.like => "%#{name}%")
      end

      #
      # Finds all exploits written for a specific organization.
      #
      # @param [String] name
      #   The name of the organization.
      #
      # @return [Array<Exploit>]
      #   The exploits written for the organization.
      #
      def self.written_for(name)
        all(self.authors.organization.like => "%#{name}%")
      end

      #
      # Finds all exploits which target a given architecture.
      #
      # @param [String, Symbol] name
      #   The name of the architecture.
      #
      # @return [Array<Exploit>]
      #   The exploits targeting the architecture.
      #
      def self.targeting_arch(name)
        all(self.targets.arch.name => name.to_s)
      end

      #
      # Finds all exploits which target a given OS.
      #
      # @param [String, Symbol] name
      #   The name of the OS.
      #
      # @return [Array<Exploit>]
      #   The exploits targeting the OS.
      #
      def self.targeting_os(name)
        all(self.targets.os.name => name.to_s)
      end

      #
      # Finds all exploits which target a given product.
      #
      # @param [String, Symbol] name
      #   The name of the product.
      #
      # @return [Array<Exploit>]
      #   The exploits targeting the product.
      #
      def self.targeting_product(name)
        all(self.targets.product.name => "%#{name}%")
      end

      #
      # Adds a new author to the exploit.
      #
      # @param [Hash] attributes
      #   Additional attributes to create the ExploitAuthor object with.
      #
      # @yield [author]
      #   If a block is given, it will be passed the newly created author
      #   object.
      #
      # @yieldparam [ExploitAuthor] author
      #   The author object tied to the exploit.
      #
      # @example
      #   author :name => 'Anonymous',
      #          :email => 'anon@example.com',
      #          :organization => 'Anonymous LLC'
      #
      def author(attributes={},&block)
        self.authors << ExploitAuthor.new(attributes,&block)
      end

      #
      # Specifies the {Target} class to use with the exploit.
      #
      # @return [Class]
      #   The target class.
      #
      # @since 0.3.2
      #
      def use_target_class
        Target
      end

      #
      # Adds a new target to the exploit.
      #
      # @param [Hash] attributes
      #   Additional attributes to create the target with.
      #
      # @yield [target]
      #   If a block is given, it will be passed the newly created target.
      #
      # @yieldparam [Target] target
      #   The newly created target.
      #
      # @example
      #   targeting do |t|
      #     t.arch! :i686
      #     t.os! :name => 'Linux'
      #   end
      #
      def targeting(attributes={},&block)
        self.targets << use_target_class.new(attributes,&block)
      end

      #
      # Adds new characters to the list of restricted characters.
      #
      # @param [Array<String>] chars
      #   The character to restrict.
      #
      # @return [Array<String>]
      #   The new list of restricted characters.
      #
      # @example
      #   restrict 0x00, "\n"
      #   # => #<Chars::CharSet: {"\0", "\n"}>
      #
      def restrict(*chars)
        @restricted_chars += chars
      end

      #
      # Adds a new encoder to the list of encoders to use for encoding the
      # payload.
      #
      # @param [#encode] encoder
      #   The payload encoder object to use.
      #   Must provide an encode method.
      #
      # @yield [payload]
      #   If a block is given, and an encoder object is not, the block will
      #   be used to encode the payload.
      #
      # @yieldparam [String] payload
      #   The payload to be encoded.
      #
      # @return [Array]
      #   The new list of encoders to use to encode the payload.
      #
      # @raise [RuntimeError]
      #   The payload encoder object does not provide an encode method.
      #
      # @raise [ArgumentError]
      #   Either a payload encoder object or a block can be given.
      #
      # @example
      #   exploit.encode_payload(some_encoder)
      #
      # @example
      #   exploit.encode_payload do |payload|
      #     # ...
      #   end
      #
      def encode_payload(encoder=nil,&block)
        if encoder
          unless encoder.respond_to?(:encode)
            raise(RuntimeError,"The payload encoder must provide an encode method",caller)
          end

          @encoders << encoder
        elsif (encoder.nil? && block)
          @encoders << block
        else
          raise(ArgumentError,"either a payload encoder or a block can be given",caller)
        end
      end

      #
      # Lists the behaviors controlled by the exploit and the payload, if
      # one is being used.
      #
      # @return [Array<Symbol>]
      #   The combined behaviors controlled by the exploit.
      #
      def behaviors
        total_behaviors = super

        if @payload
          total_behaviors = (total_behaviors + @payload.behaviors).uniq
        end

        return total_behaviors
      end

      #
      # @return [Array<Arch>]
      #   The targeted architectures.
      #
      def targeted_archs
        self.targets.map { |target| target.arch }.compact
      end

      #
      # @return [Array<OS>]
      #   The targeted OSes.
      #
      def targeted_oses
        self.targets.map { |target| target.os }.compact
      end

      #
      # @return [Array<Product>]
      #   The targeted Products.
      #
      def targeted_products
        self.targets.map { |target| target.product }.compact
      end

      #
      # Selects a target to use in exploitation.
      #
      # @param [Integer, Hash] index_or_query
      #   The index within #targets or a query to select the target.
      #
      # @yield [target]
      #   If a block is given, it will be used to select the desired
      #   target from #targets.
      #
      # @yieldparam [Target] target
      #   The potential target to review.
      #
      # @example
      #   use_target!(2)
      #
      # @example
      #   use_target!(Target.arch.name => 'i686')
      #
      # @example
      #   use_target! { |target| target.arch == Arch.i686 }
      #
      # @since 0.3.0
      #
      def use_target!(index_or_query=0,&block)
        @target = if block
                    self.targets.find(&block)
                  elsif index_or_query.kind_of?(Hash)
                    self.targets.first(index_or_query)
                  elsif index_or_query.kind_of?(Integer)
                    self.targets[index_or_query]
                  end
      end

      #
      # @return [Target]
      #   The current target to use in exploitation.
      #
      def target
        @target ||= self.targets.first
      end

      #
      # @return [Arch]
      #   The current targeted architecture.
      #
      def arch
        target.arch if target
      end

      #
      # @return [OS]
      #   The current targeted OS.
      #
      def os
        target.os if target
      end

      #
      # @return [Product]
      #   The current targeted product.
      #
      def product
        target.product if target
      end

      #
      # Associates a payload with the exploit, and the exploit with the
      # payload.
      #
      # @param [Payload] new_payload
      #   The new payload to associate with the exploit.
      #
      # @return [Payload]
      #   The new payload.
      #
      # @since 0.3.0
      #
      def payload=(new_payload)
        if (@payload && new_payload.nil?)
          @payload.exploit = nil
        end

        super(new_payload)

        if @payload
          print_info "Using payload: #{new_payload}"

          @payload.exploit = self
        end

        return @payload
      end

      #
      # Sets the raw payload to use with the exploit.
      #
      # @param [String, #to_s] new_raw_payload
      #   The new raw payload to use with the exploit.
      #
      # @return [String]
      #   The new raw payload of the exploit.
      #
      def raw_payload=(new_raw_payload)
        new_raw_payload = new_raw_payload.to_s

        print_debug "Using raw payload: #{new_raw_payload.dump}"

        @raw_payload = new_raw_payload
      end

      #
      # Builds the current payload, saving the result to the `@raw_payload`
      # instance variable.
      #
      # @param [Hash] options
      #   Additional options to build the paylod with.
      #
      # @return [String]
      #   The built payload.
      #
      # @see Payload#build!
      # @since 0.3.0
      #
      def build_payload!(options={})
        if @payload
          @raw_payload = ''

          @payload.build!(options)
          @raw_payload = @payload.raw_payload
        else
          @raw_payload ||= ''
        end

        return @raw_payload
      end

      #
      # Encodes the current payload and saves the result in the
      # `@encoded_payload` instance variable.
      #
      # @return [String]
      #   The encoded payload.
      #
      def encode_payload!
        @encoded_payload = @raw_payload.to_s

        @encoders.each do |encoder|
          print_debug "Encoding payload: #{@encoded_payload.dump}"

          new_payload = if encoder.respond_to?(:encode)
                          encoder.encode(@encoded_payload)
                        elsif encoder.respond_to?(:call)
                          encoder.call(@encoded_payload)
                        end

          @encoded_payload = (new_payload || @encoded_payload).to_s
        end

        return @encoded_payload
      end

      #
      # @return [Boolean]
      #   Specifies whether the exploit is built.
      #
      def built?
        @built == true
      end

      #
      # Builds the exploit and checks for restricted characters or patterns.
      #
      # @param [Hash] options
      #   Additional options to also use as parameters.
      #
      def build!(options={},&block)
        self.params = options

        print_debug "Exploit parameters: #{self.params.inspect}"

        @built = false

        build_payload!(options)
        encode_payload!

        print_info "Building exploit ..."

        build()
        
        print_info "Exploit built!"

        @built = true

        if block
          if block.arity == 1
            block.call(self)
          else
            block.call()
          end
        end

        return self
      end

      #
      # Verifies the exploit is built, properly configured, built and
      # ready deployment.
      #
      # @return [true]
      #   The exploit is built and ready for deployment.
      #
      # @raise [ExploitNotBuilt]
      #   The exploit has not been built, and cannot be deployed.
      #
      def verify!
        unless built?
          raise(ExploitNotBuilt,"cannot deploy an unbuilt exploit",caller)
        end

        print_info "Verifying exploit ..."

        verify

        print_info "Exploit verified!"
        return true
      end

      #
      # @return [Boolean]
      #   Specifies whether the exploit has previously been deployed.
      #
      def deployed?
        @deployed == true
      end

      #
      # Verifies then deploys the exploit. If a payload has been set,
      # the payload will also be deployed.
      #
      # @yield [exploit]
      #   If a block is given, it will be passed the deployed exploit.
      #
      # @yieldparam [Exploit] exploit
      #   The deployed exploit.
      #
      # @return [Exploit]
      #   The deployed exploit.
      #
      # @raise [ExploitNotBuilt]
      #   The exploit has not been built, and cannot be deployed.
      #
      def deploy!(&block)
        verify!

        print_info "Deploying exploit ..."
        @deployed = false

        deploy()

        print_info "Exploit deployed!"
        @deployed = true

        @payload.deploy!() if @payload

        if block
          if block.arity == 1
            block.call(self)
          else
            block.call()
          end
        end

        return self
      end

      #
      # Builds, verified and then deploys the exploit.
      #
      # @param [Hash] options
      #   Additional options to build the exploit with.
      #
      # @option options [Boolean] :dry_run (false)
      #   Specifies whether to do a dry-run of the exploit, where the
      #   exploit will be built, verified but *not* deployed.
      #
      # @yieldparam [Exploit] exploit
      #   The deployed exploit.
      #
      # @return [Exploit]
      #   The deployed exploit.
      #
      # @return [Exploit]
      #   The deployed exploit.
      #
      # @since 0.3.0
      #
      def exploit!(options={},&block)
        build!(options)

        unless options[:dry_run]
          deploy!(&block)
        end

        return self
      end

      #
      # Converts the exploit to a String.
      #
      # @return [String]
      #   The name and version of the exploit.
      #
      def to_s
        if (self.name && self.version)
          "#{self.name} #{self.version}"
        elsif self.name
          self.name
        elsif self.version
          self.version
        end
      end

      #
      # Inspects the contents of the exploit.
      #
      # @return [String]
      #   The inspected exploit.
      #
      def inspect
        str = "#{self.class}: #{self}"
        str << " #{self.params.inspect}" unless self.params.empty?

        return "#<#{str}>"
      end

      protected

      #
      # Loads a helper module from `ronin/exploits/helpers` and extends
      # the exploit with it.
      #
      # @param [Symbol, String] name
      #   The snake-case name of the exploit helper to load and extend the
      #   exploit with.
      #
      # @return [true]
      #   The exploit helper was successfully loaded.
      #
      # @raise [UnknownHelper]
      #   No valid helper module could be found or loaded with the similar
      #   name.
      #
      # @example
      #   helper :buffer_overflow
      #
      def helper(name)
        name = name.to_s

        unless (helper_module = Helpers.require_const(name))
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        unless helper_module.kind_of?(Module)
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        extend helper_module
        return true
      end

      #
      # Default build method.
      #
      def build
      end

      #
      # Default exploit verify method.
      #
      def verify
      end

      #
      # Indicates the deployment of the exploit has failed.
      #
      # @raise [DeployFailed]
      #   The deployment of the exploit failed.
      #
      # @since 0.3.2
      #
      def deploy_failed!(message)
        raise(DeployFailed,message,caller)
      end

      #
      # Default exploit deploy method.
      #
      def deploy(&block)
        block.call(self) if block
      end

      #
      # Relays method calls to the payload, if the payload is a kind of 
      # Ronin::Payloads::Payload.
      #
      # @since 0.3.0
      #
      def method_missing(name,*arguments,&block)
        if @payload.kind_of?(Ronin::Payloads::Payload)
          return @payload.send(name,*arguments,&block)
        end

        super(name,*arguments,&block)
      end

    end
  end
end
