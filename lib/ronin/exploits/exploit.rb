#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploits/exceptions/unknown_helper'
require 'ronin/exploits/exceptions/target_unspecified'
require 'ronin/exploits/exceptions/target_data_missing'
require 'ronin/exploits/exceptions/restricted_char'
require 'ronin/exploits/exceptions/exploit_not_built'
require 'ronin/exploits/exploit_author'
require 'ronin/exploits/target'
require 'ronin/exploits/allow'
require 'ronin/exploits/helpers'
require 'ronin/payloads/payload'
require 'ronin/vuln/behavior'
require 'ronin/cacheable'
require 'ronin/has_license'

require 'parameters'
require 'chars/char_set'

module Ronin
  module Exploits
    class Exploit

      include Parameters
      include Cacheable
      include HasLicense
      include Helpers

      contextify :ronin_exploit
      
      # Primary key of the exploit
      property :id, Serial

      # Name of the exploit
      property :name, String, :index => true

      # Version of the exploit
      property :version, String, :default => '0.1', :index => true

      # Description of the exploit
      property :description, Text

      # The status of the exploit (either, :potential, :proven or
      # :weaponized)
      property :status, Enum[
        :potential,
        :proven,
        :weaponized
      ], :default => :potential

      # The disclosure status of the exploit (any of, :private,
      # :vendor_aware, :in_wild and :public)
      property :disclosure, Flag[
        :private,
        :in_wild,
        :vendor_aware,
        :public
      ]

      # Author(s) of the exploit
      has n, :authors, :class_name => 'Ronin::Exploits::ExploitAuthor'

      # Behaviors that the exploit allows
      has n, :allows

      # Targets for the exploit
      has n, :targets

      # Validations
      validates_present :name
      validates_is_unique :version, :scope => [:name]

      # Exploit target
      attr_accessor :target

      # Exploit payload
      attr_accessor :payload

      # Characters to restrict
      attr_reader :restricted_chars

      # Encoders to run on the payload
      attr_reader :encoders

      # The encoded payload
      attr_reader :encoded_payload

      #
      # Creates a new Exploit object with the given _attributes_.
      #
      def initialize(attributes={},&block)
        super(attributes)

        @target = nil
        @built = false

        @restricted_chars = Chars::CharSet.new
        @encoders = []

        instance_eval(&block) if block
      end

      #
      # Finds all exploits with names like the specified _name_.
      #
      def self.named(name)
        self.all(:name.like => "%#{name}%")
      end

      #
      # Finds all exploits with descriptions like the specified
      # _description_.
      #
      def self.describing(description)
        self.all(:description.like => "%#{description}%")
      end

      #
      # Finds the exploit with the most recent vesion.
      #
      def self.latest
        self.first(:order => [:version.desc])
      end

      #
      # Adds an ExploitAuthor with the given _attributes_ to the exploit.
      # If a _block_ is given, it will be passed to the newly created
      # ExploitAuthor object.
      #
      def author(attributes={},&block)
        self.authors << ExploitAuthor.new(
          attributes.merge(:exploit => self),
          &block
        )
      end

      #
      # Adds a new Allow object granting the specified _behavior_.
      #
      def allowing(behavior)
        self.allows << Allow.new(
          :behavior => Vuln::Behavior[behavior],
          :exploit => self
        )

        return self
      end

      #
      # Adds a new Target with the given _attributes_ and _block_.
      #
      def targeting(attributes={},&block)
        self.targets << Target.new(attributes,&block)
      end

      #
      # Adds the given _chars_ to the restricted list of characters.
      #
      #   restrict 0x00, "\n"
      #   # => #<Chars::CharSet: {"\0", "\n"}>
      #
      def restrict(*chars)
        @restricted_chars += chars
      end

      #
      # Adds the specified _encoder_ to the list of encoders to use on the
      # payload.
      #
      def encode_with(encoder)
        @encoders << encoder
      end

      #
      # Returns an Array of targeted architectures.
      #
      def targeted_archs
        self.targets.map { |target| target.arch }.collect
      end

      #
      # Returns an Array of targeted OSes.
      #
      def targeted_oses
        self.targets.map { |target| target.os }.collect
      end

      #
      # Returns an Array of targeted Products.
      #
      def targeted_products
        self.targets.map { |target| target.product }.collect
      end

      #
      # Explicitly selects the first target that matches the specified
      # _block_.
      #
      #   select_target { |target| target.arch == Arch.i686 }
      #
      def select_target(&block)
        @target = self.targets.first(&block)
      end

      #
      # Returns the current target.
      #
      def target
        @target ||= self.targets.first
      end

      #
      # Returns the currently targeted architecture.
      #
      def arch
        target.arch if target
      end

      #
      # Returns the currently targeted OS.
      #
      def os
        target.os if target
      end

      #
      # Returns the currently targeted product.
      #
      def product
        target.product if target
      end

      #
      # Returns the behaviors allowed by the exploit.
      #
      def behaviors
        self.allows.map { |allow| allow.behavior }
      end

      #
      # Switches to the _new_payload_ then calls the specified _block_.
      # After the _block_ has been called the payload will be reverted to
      # it's previous value.
      #
      def switch_payload(new_payload,&block)
        old_payload = @payload
        @payload = new_payload

        block.call(self)

        @payload = old_payload
        return self
      end

      #
      # Builds and encodes the current payload, returning the encoded
      # payload in String form.
      #
      def encode_payload!
        @encoded_payload = ''

        if @payload
          if @payload.class.include?(Parameters)
            @payload.params = options
          end

          if @payload.kind_of?(Payloads::Payload)
            @encoded_payload = @payload.build!
          else
            @encoded_payload = @payload.to_s
          end

          @encoders.each do |encoder|
            if (new_payload = encoder.call(@encoded_payload))
              @encoded_payload = new_payload
            end
          end
        end

        return @encoded_payload
      end

      #
      # Returns +true+ if the exploit is built, returns +false+ otherwise.
      #
      def built?
        @built == true
      end

      #
      # Builds the exploit with the given _options_ and checks for
      # restricted characters or patterns. If any restricted characters or
      # patterns are found in the built exploit, a RestrictedText exception
      # will be raised.
      #
      def build!(options={})
        if options[:payload]
          @payload ||= options.delete(:payload)
        end

        self.params = options

        @built = false

        encode_payload!
        result = build

        @built = true
        return result
      end

      #
      # Verifies the exploit is properly configured, built and ready to be
      # deployed. An exception should be raised if the exploit is not ready
      # to be deployed, returns +true+ otherwise.
      #
      def verify!
        unless built?
          raise(ExploitNotBuilt,"cannot deploy an unbuilt exploit",caller)
        end

        verify
        return true
      end

      #
      # Deploys the exploit. If a _block_ is given and the payload used is
      # a kind of Payload, then the payloads deploy method will be passed
      # the given _block_. If the payload used is not a kind of Payload and
      # a _block_ is given, the _block_ will be passed to the exploits
      # deploy method. If the exploit has not been previously built, an
      # ExploitNotBuilt exception will be raised.
      #
      def deploy!(&block)
        verify!

        if @payload.kind_of?(Payloads::Payload)
          deploy()

          return @payload.deploy!(&block)
        else
          return deploy(&block)
        end
      end

      #
      # Builds, deploys and then cleans the exploit with the given
      # _options_.
      #
      def exploit(options={},&block)
        build!(options)

        return deploy!(&block)
      end

      #
      # Returns the name and version of the exploit.
      #
      def to_s
        "#{self.name} #{self.version}"
      end

      protected

      #
      # Extends the exploit with the helper module defined in
      # Ronin::Exploits::Helpers that has the similar specified
      # _name_. If no module can be found within
      # Ronin::Exploits::Helpers with the similar _name_, an
      # UnknownHelper exception will be raised.
      #
      #   helper :buffer_overflow
      #
      def helper(name)
        name = name.to_s
        module_name = name.const_string

        unless Ronin::Exploits::Helpers.const_defined?(module_name)
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        helper_module = Ronin::Exploits::Helpers.const_get(module_name)

        unless helper_module.kind_of?(Module)
          raise(UnknownHelper,"unknown helper #{name.dump}",caller)
        end

        extend helper_module
        return true
      end

      def verify_target
        unless target
          raise(TargetUnspecified,"the target has not been set",caller)
        end
      end

      #
      # Returns +true+ if the specified _text_ contains any restricted
      # characters, returns +false+ otherwise.
      #
      def is_restricted?(text)
        text.each_byte do |b|
          return true if @restricted_chars.include?(b)
        end

        return false
      end

      #
      # Raises a RestrictedChar exception if the specified _text_ contains
      # any restricted characters, returns +true+ otherwise.
      #
      def verify_restricted(text)
        found = @restricted_chars.select { |char|
          text.include?(char)
        }.map { |char| char.dump }

        unless found.empty?
          raise(RestrictedChar,"restricted characters #{found.join(', ')} was detected in #{text.dump}",caller)
        end

        return true
      end

      #
      # Default build method.
      #
      def build
      end

      #
      # Default exploit verify method.
      #
      def verify
      end

      #
      # Default exploit deploy method, passes the exploit object to the
      # given _block_ by default.
      #
      def deploy(&block)
        block.call(self) if block
      end

    end
  end
end
