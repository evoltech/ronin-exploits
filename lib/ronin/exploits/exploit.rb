#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploits/requirement'
require 'ronin/exploits/impact'
require 'ronin/exploits/exploit_author'
require 'ronin/vulnerability/behavior'
require 'ronin/object_context'
require 'ronin/parameters'
require 'ronin/license'

module Ronin
  module Exploits
    class Exploit

      include ObjectContext
      include Parameters

      object_contextify :exploit

      # Name of the exploit
      property :name, String, :index => true

      # Version of the exploit
      property :version, String, :default => '0.1', :index => true

      # Description of the exploit
      property :description, Text

      # Content license
      belongs_to :license

      # Author(s) of the exploit
      has n, :authors, :class_name => 'ExploitAuthor'

      # The requirements of the exploit
      has n, :requirements

      # Impact of the exploit
      has n, :impact, :class_name => 'Impact'

      # Validations
      validates_present :name
      validates_is_unique :version, :scope => [:name]

      # Exploit payload
      parameter :payload, :description => 'exploit payload'

      # The built payload
      attr_accessor :built_payload

      #
      # Creates a new Exploit object with the given _attributes_.
      #
      def initialize(attributes={})
        super(attributes)

        @is_built = false
      end

      #
      # Finds all exploits with names like the specified _name_.
      #
      def self.named(name)
        self.all(:name.like => "%#{name}%")
      end

      #
      # Finds all exploits with descriptions like the specified
      # _description_.
      #
      def self.describing(description)
        self.all(:description.like => "%#{description}%")
      end

      #
      # Finds the exploit with the most recent vesion.
      #
      def self.latest
        self.first(:order => [:version.desc])
      end

      #
      # Adds an ExploitAuthor with the given _attributes_ to the exploit.
      # If a _block_ is given, it will be passed the ExploitAuthro object.
      #
      def author(attributes={},&block)
        self.authors << ExploitAuthor.first_or_create(attributes,&block)
      end

      #
      # Adds a new Requirement for the Ability with the specified _name_.
      #
      def requires(name)
        self.requirements << Requirement.new(
          :behavior => Vulnerability::Behavior.first_or_create(
            :name => name
          ),
          :exploit => self
        )

        return self
      end

      #
      # Adds a new Impact granting the behavior with the specified _name_.
      #
      def allows(name)
        self.impact << Impact.new(
          :behavior => Vulnerability::Behavior.first_or_create(
            :name => name.to_s
          ),
          :exploit => self
        )

        return self
      end

      #
      # Default vulnerability test method, always returns +true+.
      #
      def vulnerable?
        true
      end

      #
      # Default builder method.
      #
      def builder
      end

      #
      # Returns +true+ if the exploit is built, returns +false+ otherwise.
      #
      def is_built?
        @is_built == true
      end

      #
      # Builds the exploit and checks for restricted characters or
      # patterns. If any restricted characters or patterns are found in
      # the built exploit, a RestrictedText exception will be raised.
      #
      def build
        if @payload.kind_of?(Payloads::Payload)
          @payload.prepare(self)

          @built_payload = @payload.build
        else
          @built_payload = @payload
        end

        return builder
      end

      def verifier
      end

      def verify
        verifier
      end

      #
      # Default exploit deployer method.
      #
      def deployer
      end

      #
      # Deploys the exploit. If a _block_ is given and the payload used is
      # a kind of Payload, then the payloads deploy method will be passed
      # the given _block_. If the payload used is not a kind of Payload and
      # a _block_ is given, the _block_ will be passed to the exploits
      # deployer method. If the exploit has not been previously built, an
      # ExploitNotBuilt exception will be raised.
      #
      def deploy(&block)
        unless is_built?
          raise(ExploitNotBuilt,"cannot deploy an unbuilt exploit",caller)
        end

        if @payload.kind_of?(Payloads::Payload)
          deployer()

          return @payload.deploy(&block)
        else
          return deployer(&block)
        end
      end

      #
      # Builds, deploys and then cleans the exploit.
      #
      def exploit(&block)
        build()
        result = deploy(&block)

        return result
      end

      #
      # Returns the name and version of the exploit in String form.
      #
      def to_s
        return "#{@name} #{@version}" if @version
        return @name.to_s
      end

    end
  end
end
