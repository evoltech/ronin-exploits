#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploit/product'
require 'ronin/target'

module Ronin
  module Exploits
    class ExploitTarget < Target

      # Target comments
      property :description, String

      # Targeted product
      belongs_to :product, :class_name => 'ExploitProduct'

      # The exploit the target belongs to
      belongs_to :exploit

      # The target data to use for the exploit
      attr_reader :data

      #
      # Creates a new ExploitTarget object with the given _attributes_
      # and the given _block_.
      #
      def initialize(attributes={},&block)
        @data = {}

        if attributes[:data]
          @data.merge!(attributes.delete(:data))
        end

        super(attributes)

        block.call(self) if block
      end

      #
      # Returns the target setting with the specified _name_.
      #
      def [](name)
        @data[name.to_sym]
      end

      #
      # Sets the target setting with the specified _name_ and _value_.
      #
      def []=(name,value)
        @data[name.to_sym] = value
      end

      protected

      #
      # Provides transparent access to the target data Hash.
      #
      def method_missing(name,*arguments,&block)
        unless block
          name = name.to_s

          if (name[-1..-1] == '=' && arguments.length == 1)
            return self[name.chop] = arguments.first
          elsif arguments.length == 0
            return self[name]
          end
        end

        super(name,*arguments,&block)
      end

    end
  end
end
