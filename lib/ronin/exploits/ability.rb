#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploits/exceptions/unknown_ability'
require 'ronin/exploits/requirement'
require 'ronin/exploits/impact'

require 'ronin/extensions/meta'
require 'ronin/model'

module Ronin
  module Exploits
    class Ability

      include Model

      property :id, Serial

      # Name of the ability
      property :name, String

      # Description for the ability
      property :description, Text

      # Effects inherited by the ability
      has n, :inherites, :class_name => 'Ability'

      # The requirements which require the ability
      has n, :requirements

      # The impacts which grant the ability
      has n, :impacts

      # Validates
      validates_present :name, :description
      validates_is_unique :name

      #
      # Creates a new Impact with the given _options_. If a _block_ is
      # given, it will be passed the newly created Impact object.
      #
      # _options_ may contain the following keys:
      # <tt>:name</tt>:: The name of ability.
      # <tt>:description</tt>:: The description of the ability.
      #
      def initialize(options={},&block)
        super(options)

        block.call(self) if block
      end

      def self.named(name)
        name = name.to_s
        ability = self.first(:name => name)

        unless ability
          raise(UnknownAbility,"unknown ability #{name.dump}",caller)
        end

        return ability
      end

      #
      # Returns the name of the ability.
      #
      def to_s
        @name.to_s
      end

      protected

      #
      # Defines a new builtin Ability with the specified _name_ and the
      # given _options_. If a _block_ is given, it will be passed newly
      # created Ability objects.
      #
      # _options_ may contain the following keys:
      # <tt>:description</tt>:: The description of the effect.
      #
      def Ability.define(name,options={},&block)
        name = name.to_s
        description = options[:description]

        meta_def(name.to_method_name) do
          ability = Ability.first(:name => name)

          unless ability
            ability = Ability.create(:name => name,
                                   :description => description)
            block.call(ability) if block
          end

          return ability
        end

        return nil
      end

    end
  end
end
