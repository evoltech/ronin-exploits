#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/exceptions/payload_size'
require 'ronin/exploits/targets/buffer_overflow'
require 'ronin/exploits/helpers/binary'
require 'ronin/exploits/helpers/padding'
require 'ronin/payloads/shellcode'

module Ronin
  module Exploits
    module Helpers
      #
      # Adds methods to exploits for building buffers used in
      # buffer overflows.
      #
      # ## Targets
      #
      # Uses the {Targets::BufferOverflow} target.
      #
      # ## Payloads
      #
      # Uses the {Payloads::Shellcode} payload by default.
      #
      module BufferOverflow
        # The buffer to use for the buffer overflow.
        attr_accessor :buffer

        def self.extended(obj)
          obj.instance_eval do
            extend Ronin::Exploits::Helpers::Binary
            extend Ronin::Exploits::Helpers::Padding
          end
        end

        #
        # Specifies that the exploit should use the
        # {Targets::BufferOverflow} target class.
        #
        # @return [Class]
        #   Returns the {Targets::BufferOverflow} class.
        #
        # @since 0.3.2
        #
        def use_target_class
          Targets::BufferOverflow
        end

        #
        # Specifies that the exploit should use the {Payloads::Shellcode}
        # class when searching for compatible payloads.
        #
        # @return [Class]
        #   Returns the {Payloads::Shellcode} class.
        #
        # @since 0.3.0
        #
        def use_payload_class
          Payloads::Shellcode
        end

        protected
       
        #
        # Builds the buffer with the current target and payload to be
        # used in the buffer overflow exploit.
        #
        # @return [String]
        #   The built buffer.
        #
        # @raise [PayloadSize]
        #   The encoded payload is too large to fit within the targeted
        #   buffer length.
        #
        def build_buffer
          verify_target!

          if encoded_payload.length > target.buffer_length
            raise(PayloadSize,"the specified payload is too large for the target's buffer length",caller)
          end

          buffer = pad(target.buffer_length - encoded_payload.length) + encoded_payload
          ip_packed = pack(target.ip)

          if target.bp
            buffer << ((pack(target.bp) + ip_packed) * target.frame_repeat)
          else
            buffer << ((ip_packed * 2) * target.frame_repeat)
          end

          return buffer
        end

        #
        # Default builder method which simply calls build_buffer and sets
        # the `@buffer` instance variable..
        #
        def build
          @buffer = build_buffer
        end
      end
    end
  end
end
