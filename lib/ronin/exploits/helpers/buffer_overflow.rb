#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/exceptions/payload_size'
require 'ronin/payloads/shellcode'

module Ronin
  module Exploits
    module Helpers
      #
      # Adds methods to exploits for building buffers used in
      # buffer overflows.
      #
      # ## Target Parameters
      #
      # The buffer overflow helper uses the following target parameters:
      #
      # * `ip` (**required**) - The Instruction Pointer (IP) to overwrite
      #   on the stack.
      # * `bp` - The Base Pointer (BP) to overwrite on the stack.
      # * `buffer_length` - The length of the buffer to overflow.
      # * `stack_frame_repeat` - The number of times to repeat the
      #   overwritten stack frame.
      #
      # ## Payloads
      #
      # Uses the {Payloads::Shellcode} payload by default.
      #
      module BufferOverflow
        # The buffer to use for the buffer overflow.
        attr_accessor :buffer

        def self.extended(obj)
          obj.instance_eval do
            helper :binary
            helper :padding
          end
        end

        #
        # Specifies that the exploit should use the {Payloads::Shellcode}
        # class when searching for compatible payloads.
        #
        # @return [Class]
        #   Returns the {Payloads::Shellcode} class.
        #
        # @since 0.3.0
        #
        def use_payload_class
          Payloads::Shellcode
        end

        #
        # Verifies the selected target has the `ip` target parameter.
        #
        # @return [true]
        #   The target is valid.
        #
        # @raise [TargetDataMissing]
        #   The target did not contain the `ip` target parameter.
        #
        # @since 0.4.0
        #
        def verify_target!
          super

          unless target.param?(:ip)
            raise(TargetDataMissing,"no such target param 'ip'")
          end
        end

        protected
       
        #
        # Builds the buffer with the current target and payload to be
        # used in the buffer overflow exploit.
        #
        # @return [String]
        #   The built buffer.
        #
        # @raise [PayloadSize]
        #   The encoded payload is too large to fit within the targeted
        #   buffer length.
        #
        def build_buffer
          verify_target!

          buffer = ''

          if target[:buffer_length]
            if encoded_payload.length > target[:buffer_length]
              raise(PayloadSize,"the specified payload is too large for the target's buffer length")
            end

            buffer << pad(target[:buffer_length] - encoded_payload.length)
          else
            buffer << encoded_payload
          end

          ip_packed = pack(target.ip)

          stack_frame_repeat = (target[:stack_frame_repeat] || 1)

          if target[:bp]
            buffer << ((pack(target[:bp]) + ip_packed) * stack_frame_repeat)
          else
            buffer << ((ip_packed * 2) * stack_frame_repeat)
          end

          return buffer
        end
      end
    end
  end
end
