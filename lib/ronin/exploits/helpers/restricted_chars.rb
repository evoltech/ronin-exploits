#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/exploits/exceptions/restricted_char'

require 'chars/char_set'

module Ronin
  module Exploits
    module Helpers
      module RestrictedChars
        #
        # The set of restricted characters.
        #
        def restricted_chars
          @restricted_chars ||= CharSet.new
        end

        #
        # Adds the given _chars_ to the restricted list of characters.
        #
        #   restrict 0x00, "\n"
        #   # => #<Ronin::Chars::CharSet: {"\0", "\n"}>
        #
        def restrict(*chars)
          restricted_chars += chars
        end

        protected

        #
        # Returns +true+ if the specified _text_ contains any restricted
        # characters, returns +false+ otherwise.
        #
        def is_restricted?(text)
          text.each_byte do |b|
            return true if restricted_chars.include?(b)
          end

          return false
        end

        #
        # Raises a RestrictedChar exception if the specified _text_ contains
        # any restricted characters, returns +true+ otherwise.
        #
        def verify_restricted(text)
          text.each_byte do |b|
            if restricted_chars.include?(b)
              raise(RestrictedChar,"restricted character #{b.chr.dump} was detected in #{text.dump}",caller)
            end
          end

          return true
        end
      end
    end
  end
end
