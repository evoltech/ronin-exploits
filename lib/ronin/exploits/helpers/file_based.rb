#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/config'

module Ronin
  module Exploits
    module Helpers
      module FileBased
        def self.included(base)
          base.module_eval do
            parameter :output_dir,
                      :default => Config::TMP_DIR,
                      :description => 'Directory to save built file in'

            parameter :file_name,
                      :default => 'exploit',
                      :description => 'Name of the file'
          end
        end

        def self.extended(obj)
          obj.instance_eval do
            parameter :output_dir,
                      :default => Config::TMP_DIR,
                      :description => 'Directory to save built file in'

            parameter :file_name,
                      :default => 'exploit',
                      :description => 'Name of the file'
          end
        end

        #
        # Returns the absolute path of the file to be built.
        #
        def file_path
          File.expand_path(::File.join(@output_dir,@file_name))
        end

        protected

        #
        # Opens the file to be built, passing a new File object to the given
        # _block_.
        #
        #   file_open do |file|
        #     file << 'Some data'
        #   end
        #
        def file_open(&block)
          File.open(self.file_path,'w',&block)
        end
      end
    end
  end
end
