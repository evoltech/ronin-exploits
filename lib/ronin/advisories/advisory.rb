#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/exploits/reference'
require 'ronin/model'

require 'uri/http'
require 'uri/https'
require 'uri/query_params'

module Ronin
  module Advisories
    #
    # Represents a vulnerability Advisory, with a Publisher, Number and
    # URL.
    #
    # @since 1.0.0
    #
    class Advisory

      include Model

      # Primary key of the advisory
      property :id, Serial

      # The type of the advisory
      property :type, Discriminator

      # The publisher of the advisory
      property :publisher, String, :required => true,
                                   :unique_index => :publisher_number

      # The number for the advisory
      property :number, String, :length => 15,
                                :required => true,
                                :unique_index => :publisher_number

      # The references to the advisory
      has 0..n, :references, :model => 'Ronin::Exploits::Reference'

      # The exploits for the advisory
      has 0..n, :exploits, :through => :references,
                           :model => 'Ronin::Exploits::Exploit'

      #
      # Default method which provides a URL to the advisory.
      #
      # @return [URI::HTTPS, URI::HTTP]
      #   The URL for the advisory.
      #
      # @abstract
      #
      def url
      end

      #
      # Converts the advisory to a String.
      #
      # @return [String]
      #   The publisher and number of the advisory.
      #
      def to_s
        "#{self.publisher}-#{self.number}"
      end

      #
      # Coerces the advisory into an Array.
      #
      # @return [Array<publisher, number>]
      #   The publisher and number of the advisory.
      #
      def to_ary
        [self.publisher, self.number]
      end

      #
      # Inspects the advisory.
      #
      # @return [String]
      #   The inspected advisory.
      #
      def inspect
        if self.class == Advisory
          "#<#{self.class}: #{self}>"
        else
          "#<#{self.class}: #{self.number}>"
        end
      end

    end
  end
end
