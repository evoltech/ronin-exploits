#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/product'

require 'extlib'

module Ronin
  module Model
    module TargetsProduct
      def self.included(base)
        base.module_eval do
          # The targeted product
          belongs_to :product,
                     :model => 'Ronin::Product',
                     :required => false

          #
          # The product being targeted.
          #
          # @param [Array] arguments
          #   If any arguments are given, a new Product will be created using
          #   the given arguments.
          #
          # @return [Product]
          #   The product of that is being targeted.
          #
          # @example Accessing the targeted product.
          #   target.product
          #   # => nil
          #
          # @example Setting the targeted product.
          #   target.product(:name => 'Apache', :version => '1.3.3.7')
          #   # => #<Ronin::Product type=Ronin::Product id=nil name="Apache"
          #   # version="1.3.3.7" vendor="Apache">
          #
          def product(*arguments)
            unless arguments.empty?
              return self.product = Product.first_or_create(*arguments)
            else
              return relationships[:product].get(self)
            end
          end
        end

        model_name = base.name.split('::').last.snake_case.plural.to_sym
        Product.has(Product.n,model_name,:model => base.name)
      end
    end
  end
end
