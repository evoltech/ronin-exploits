#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/model'
require 'ronin/software'

module Ronin
  module Model
    #
    # Adds a `software` relation between the model and the `Ronin::Software`
    # model.
    #
    module TargetsSoftware
      def self.included(base)
        base.send :include, InstanceMethods
        base.send :extend, ClassMethods

        base.module_eval do
          # The targeted software
          belongs_to :software,
                     :model => 'Ronin::Software',
                     :required => false
        end

        Software.has Software.n, base.relationship_name, :model => base.name
      end

      module ClassMethods
        #
        # Queries all resources targeting a specific Software.
        #
        # @param [Software, Hash, #to_s] software
        #   The software to search for.
        #
        # @return [DataMapper::Collection]
        #   The matching resources.
        #
        # @since 1.0.0
        #
        # @api public
        #
        def targeting_software(software)
          query = case software
                  when Software, Hash
                    {:software => software}
                  else
                    {'software.name.like' => "%#{software}%"}
                  end

          all(query)
        end
      end

      module InstanceMethods
        #
        # Targets a piece of software.
        #
        # @param [Hash] attributes
        #   The attributes for the software.
        #
        # @return [Software]
        #   The piece of software that is being targeted.
        #
        # @example
        #   target.software! :name => 'Apache', :version => '1.3.3.7'
        #   # => #<Ronin::Softer type=Ronin::Product id=nil name="Apache"
        #   # version="1.3.3.7" vendor="Apache">
        #
        # @since 1.0.0
        #
        def software!(attributes)
          self.software = Software.first_or_new(attributes)
        end
      end
    end
  end
end
