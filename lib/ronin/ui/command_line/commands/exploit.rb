#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/ui/command_line/command'
require 'ronin/exploits'
require 'ronin/payloads'
require 'ronin/database'

require 'parameters/parser'

module Ronin
  module UI
    module CommandLine
      module Commands
        class Exploit < Command

          desc "exploit", "Builds and deploys an exploit"
          method_option :database, :type => :string, :default => Database.config, :aliases => '-D'

          # exploit options
          method_option :name, :type => :string, :aliases => '-n'
          method_option :version, :type => :string, :aliases => '-V'
          method_option :params, :type => :array, :default => [], :aliases => '-p'
          method_option :list_params, :type => :boolean
          method_option :dry_run, :type => :boolean, :default => false
          method_option :raw_payload, :type => :string
          method_option :file, :type => :string, :aliases => '-f'

          # target options
          method_option :target, :type => :integer, :alias => '-t'
          method_option :target_arch, :type => :string, :aliases => '-a'
          method_option :target_os, :type => :string, :aliases => '-o'
          method_option :list_targets, :type => :boolean, :aliases => '-T'

          # payload options
          method_option :payload_name, :type => :string, :aliases => '--payload -P'
          method_option :payload_version, :type => :string
          method_option :payload_file, :type => :string

          def default
            params = Parameters::Parser.parse(options[:params])

            Database.setup!(options[:database])
          end
        end
      end
    end
  end
end
