#
#--
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/payloads'
require 'ronin/ui/command_line/command'
require 'ronin/ui/verbose'
require 'ronin/database'

require 'parameters/parser'

module Ronin
  module UI
    module CommandLine
      module Commands
        class Payload < Command

          include Parameters::Parser

          desc "default [NAME]", "Builds the specified Payload"
          method_option :database, :type => :string, :aliases => '-D'
          method_option :params, :type => :array, :default => [], :aliases => '-p'
          method_option :file, :type => :string, :aliases => '-f'
          method_option :verbose, :type => :boolean, :aliases => '-v'
          method_option :version, :type => :string, :aliases => '-V'

          def default(name=nil)
            UI::Verbose.enable! if options[:verbose]

            if options[:database]
              Database.config = options[:database]
            end

            Database.setup!

            # Load the payload
            if options[:file]
              payload = Payloads::Payload.load_from(options[:file])
            elsif name
              query = {:name => name}

              if options[:version]
                query[:version.like] = options[:version]
              end

              unless (payload = Payloads::Payload.first(query))
                say "could not find the specified payload", :red
                exit -1
              end
            else
              say "must either specify a payload NAME or a PATH", :red
              exit -1
            end

            params = {}

            options[:params].each do |name_and_value|
              params.merge!(Parser.parse_param(name_and_value))
            end

            # Build the payload
            payload.build!(params)

            # Dump the built payload
            puts payload.payload.dump
          end

        end
      end
    end
  end
end
