#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2009 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/ui/command_line/command'

require 'ronin/payloads'
require 'ronin/database'

module Ronin
  module UI
    module CommandLine
      module Commands
        class Payloads < Command

          desc "payloads [options]", "Lists the available Payloads"
          method_option :database, :type => :string, :default => Database.config, :aliases => '-D'
          method_option :name, :type => :string, :aliases => '-n'
          method_option :version, :type => :string, :aliases => '-v'
          method_option :describing, :stype => :string, :aliases => '-d'
          method_option :license, :type => :string, :aliases => '-l'
          method_option :arch, :type => :string, :aliases => '-a'
          method_option :os, :type => :string, :aliases => '-o'

          def default
            Database.setup(options[:database])

            payloads = Ronin::Payloads::Payload.all

            if options[:name]
              payloads = payloads.named(options[:name])
            end

            if options[:version]
              payloads = payloads.revision(options[:version])
            end

            if options[:describing]
              payloads = payloads.describing(options[:describing])
            end

            if options[:license]
              payloads = payloads.licensed_under(options[:license])
            end

            if options[:arch]
              payloads = payloads.targeting_arch(options[:arch])
            end

            if options[:os]
              payloads = payloads.targeting_os(options[:os])
            end

            if payloads.empty?
              print_error "could not find similar payloads"
              exit -1
            end

            payloads.each { |payload| puts "  #{payload.name}" }
          end

        end
      end
    end
  end
end
