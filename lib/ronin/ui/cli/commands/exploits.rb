#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/ui/cli/model_command'

require 'ronin/exploits'
require 'ronin/database'

module Ronin
  module UI
    module CLI
      module Commands
        class Exploits < ModelCommand

          self.model = Ronin::Exploits::Exploit

          desc 'Lists available exploits'

          query_option :named, :type => :string,
                               :aliases => '-n',
                               :banner => 'NAME'

          query_option :revision, :type => :string,
                                  :aliases => '-V',
                                  :banner => 'VERSION'

          query_option :describing, :stype => :string,
                                    :aliases => '-d',
                                    :banner => 'TEXT'

          query_option :status, :type => :string,
                                :aliases => '-s',
                                :banner => 'potential|proven|weaponized'

          query_option :licensed_under, :type => :string,
                                        :aliases => '-l',
                                        :banner => 'LICENSE'

          query_option :targeting_arch, :type => :string,
                                        :aliases => '-a',
                                        :banner => 'x86|x86_64|ia64|ppc|ppc64|sparc|sparc64|mips|mips_le|arm|arm_le'

          query_option :targeting_os, :type => :string,
                                      :aliases => '-o',
                                      :banner => 'Linux|FreeBSD|OpenBSD|NetBSD|OSX|Solaris|Windows|UNIX'

          query_option :targeting_software, :type => :string,
                                            :aliases => '-S',
                                            :banner => 'SOFTWARE'

          class_option :verbose, :type => :boolean, :aliases => '-v'

          protected

          def print_resource(exploit)
            unless options.verbose?
              puts "  #{exploit}"
              return
            end

            print_hash(
              exploit.humanize_attributes(:exclude => [:description]),
              :title => "Exploit: #{exploit}"
            )

            indent do
              if exploit.description
                puts "Description:\n\n"
                indent do
                  exploit.description.each_line { |line| puts line }
                end
                puts "\n"
              end

              unless exploit.authors.empty?
                exploit.authors.each do |author|
                  print_hash(author.humanize_attributes, :title => 'Author')
                end
              end

              unless exploit.behaviors.empty?
                print_array(exploit.behaviors, :title => 'Exploits')
              end

              unless exploit.targets.empty?
                exploit.targets.each do |target|
                  attributes = target.humanize_attributes(:exclude => [:data])
                  if target.arch
                    attributes['Arch'] = target.arch
                  end

                  if target.os
                    attributes['OS'] = target.os
                  end

                  if target.software
                    attributes['Software'] = target.software
                  end

                  print_hash(attributes, :title => 'Target')

                  unless target.data.empty?
                    print_title("Target Data")

                    indent do
                      target.data.each do |name,value|
                        puts "#{name} [#{value.inspect}]"
                      end
                    end
                  end
                end
              end

              begin
                exploit.load_original!
              rescue Exception => e
                print_exception e
              end

              unless exploit.params.empty?
                print_array(exploit.params.values, :title => 'Parameters')
              end
            end
          end

        end
      end
    end
  end
end
