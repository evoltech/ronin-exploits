#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/ui/cli/resources_command'
require 'ronin/exploits/exploit'

module Ronin
  module UI
    module CLI
      module Commands
        class Exploits < ResourcesCommand

          summary 'Lists available exploits'

          model Ronin::Exploits::Exploit

          query_option :named, :type => String,
                               :flag => '-n',
                               :usage => 'NAME'

          query_option :revision, :type => String,
                                  :flag => '-V',
                                  :usage => 'VERSION'

          query_option :describing, :stype => String,
                                    :flag => '-d',
                                    :usage => 'TEXT'

          query_option :status, :type => String,
                                :flag => '-s',
                                :usage => 'potential|proven|weaponized'

          query_option :licensed_under, :type => String,
                                        :flag => '-l',
                                        :usage => 'LICENSE'

          query_option :targeting_arch, :type => String,
                                        :flag => '-a',
                                        :usage => 'x86|x86_64|ia64|ppc|ppc64|sparc|sparc64|mips|mips_le|arm|arm_le'

          query_option :targeting_os, :type => String,
                                      :flag => '-o',
                                      :usage => 'Linux|FreeBSD|OpenBSD|NetBSD|OSX|Solaris|Windows|UNIX'

          query_option :targeting_software, :type => String,
                                            :flag => '-S',
                                            :usage => 'SOFTWARE'

          protected

          def print_resource(exploit)
            unless verbose?
              puts "  #{exploit}"
              return
            end

            print_hash(
              exploit.humanize_attributes(:exclude => [:description]),
              :title => "Exploit: #{exploit}"
            )

            indent do
              if exploit.description
                puts "Description:\n\n"
                indent do
                  exploit.description.each_line { |line| puts line }
                end
                puts "\n"
              end

              unless exploit.authors.empty?
                exploit.authors.each do |author|
                  print_hash author.humanize_attributes, :title => 'Author'
                end
              end

              unless exploit.behaviors.empty?
                print_array exploit.behaviors, :title => 'Exploits'
              end

              unless exploit.targets.empty?
                exploit.targets.each do |target|
                  attributes = target.humanize_attributes(:exclude => [:data])
                  if target.arch
                    attributes['Arch'] = target.arch
                  end

                  if target.os
                    attributes['OS'] = target.os
                  end

                  if target.software
                    attributes['Software'] = target.software
                  end

                  print_hash attributes, :title => 'Target'

                  unless target.data.empty?
                    print_title("Target Data")

                    indent do
                      target.data.each do |name,value|
                        puts "#{name} [#{value.inspect}]"
                      end
                    end
                  end
                end
              end

              begin
                exploit.load_code!
              rescue Exception => error
                print_exception error
              end

              unless exploit.params.empty?
                print_array exploit.params.values, :title => 'Parameters'
              end
            end
          end

        end
      end
    end
  end
end
