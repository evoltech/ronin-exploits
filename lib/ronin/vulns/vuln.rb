#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/model'
require 'ronin/model/has_title'
require 'ronin/model/has_description'

module Ronin
  module Vulns
    #
    # A Mixin which sets up a vulnerability model, used to exploiting a
    # certain class of vulnerability.
    #
    module Vuln
      def self.included(base)
        base.send :include, Ronin::Model,
                            Ronin::Model::HasTitle,
                            Ronin::Model::HasDescription
      end

      #
      # Creates a new vulnerability.
      #
      # @param [Hash] attributes
      #   Additional attributes used to initialize the vulnerability.
      #
      # @since 0.4.0
      #
      def initialize(attributes={},&block)
        super(attributes)

        @exploit_block = block
      end

      #
      # Default method used to exploit the vulnerability.
      #
      # @param [Hash] options
      #   Additional options for exploitation.
      #
      # @return [Object]
      #   Result of the exploitation.
      #
      # @since 0.4.0
      #
      def exploit(options={})
      end

      #
      # Exploits the vulnerability.
      #
      # @param [Hash] options
      #   Additional options for exploitation.
      #
      # @since 0.4.0
      #
      def exploit!(options={})
        if @exploit_block
          case @exploit_block.arity
          when 2, -1
            @exploit_block.call(self,options)
          else
            @exploit_block.call(self)
          end
        else
          exploit(options)
        end
      end
    end
  end
end
