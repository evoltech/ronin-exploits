#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/vulns/vuln'
require 'ronin/vulns/url'
require 'ronin/network/http'

module Ronin
  module Vulns
    #
    # Represents vulnerabilities discovered at URLs.
    #
    class Web

      include Vuln

      # The primary-key of the web vulnerability
      property :id, Serial

      # The HTTP request method to use
      property :request_method, String, :set => [
        nil,
        'OPTIONS',
        'GET',
        'HEAD',
        'POST',
        'PUT',
        'DELETE',
        'TRACE',
        'CONNECT'
      ]

      # The HTTP header the vulnerability exists in
      property :header_name, String

      # The query-param the vulnerability exists in
      property :query_param, String

      # The original data from the query-param / header
      property :original_data, String

      # The URL the web vulnerability was found in
      belongs_to :url, :model => 'URL'

      # The proxy to use when exploiting the web vulnerability
      attr_accessor :proxy

      # Additional headers to send
      attr_accessor :headers

      # The Session Cookie to use when exploiting the web vulnerability
      attr_accessor :cookie

      # The Referer Header to send when exploiting the web vulnerability
      attr_accessor :referer

      # The User-Agent Header to send when exploiting the web vulnerability
      attr_accessor :user_agent

      #
      # Initializes the web vulnerability.
      #
      # @param [Hash] attributes
      #   Additional attributes.
      #
      # @since 0.4.0
      #
      def initialize(attributes={})
        @proxy = attributes.delete(:proxy)
        @headers = (attributes.delete(:headers) || {})
        @cookie = attributes.delete(:cookie)
        @referer = attributes.delete(:referer)
        @user_agent = attributes.delete(:user_agent)

        super(attributes)
      end

      #
      # The vulnerable URI.
      #
      # @return [URI::HTTP]
      #   The vulnerable URI.
      #
      # @since 0.4.0
      #
      def uri
        @uri ||= self.url.to_uri
      end

      #
      # Creates an exploitation URI by injecting the data into the
      # vulnerable query-param.
      #
      # @param [Hash, String, nil] injection
      #   The data to inject.
      #
      # @return [URI::HTTP]
      #   The exploitation URI.
      #
      # @see String#inject_with
      #
      # @since 0.4.0
      #
      def exploit_uri(injection=nil)
        new_uri = uri.clone

        if (self.query_param && injection)
          original_data = new_uri.query_params[self.query_param].to_s
          injected_data = original_data.inject_with(injection)

          # inject data into the vulnerable query-param
          new_uri.query_params[self.query_param] = injected_data
        end

        return new_uri
      end

      #
      # Creates exploitation Headers by injecting the data into the
      # vulnerable HTTP Header.
      #
      # @param [Hash, String, nil] injection
      #   The data to inject.
      #
      # @return [Hash]
      #   The exploitation Headers.
      #
      # @see String#inject_with
      #
      # @since 0.4.0
      #
      def exploit_headers(injection=nil)
        new_headers = @headers.clone

        # set additional headers
        new_headers['Cookie'] = @cookie if @cookie
        new_headers['Referer'] = @referer if @referer
        new_headers['User-Agent'] = @user_agent if @user_agent

        if (self.header_name && injection)
          original_data = new_headers[self.header_name].to_s
          injected_data = original_data.inject_with(injection)

          # inject data into the vulnerable header
          new_headers[self.header_name] = injected_data
        end

        return new_headers
      end

      #
      # Exploits the vulnerable URL.
      #
      # @param [Hash] options
      #   Additional options.
      #
      # @return [Net::HTTP::Response]
      #   The response from the server.
      #
      # @see Net.http_request
      #
      # @since 0.4.0
      #
      def exploit(options={},&block)
        options = options.merge(
          :proxy => proxy,
          :method => self.request_method,
          :url => uri,
          :headers => headers
        )

        return Net.http_request(options,&block)
      end

    end
  end
end
