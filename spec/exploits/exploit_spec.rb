require 'ronin/exploits/exploit'

require 'spec_helper'

describe Exploits::Exploit do
  before(:each) do
    @xploit = Exploits::Exploit.new(:name => 'test') do
      targeting do |target|
        target.arch = Arch.i686
        target.os = OS.linux_version('2.6.23')
        target.product = TargetedProduct.new(:name => 'ExampleWare', :version => '1.5')
      end

      targeting do |target|
        target.arch = Arch.i386
        target.os = OS.windows_version('7.1')
        target.product = TargetedProduct.new(:name => 'ExampleWare', :version => '1.5')
      end

      def build
        'result'
      end
    end
  end

  it "should require a name attribute" do
    exp2 = Exploits::Exploit.new
    exp2.should_not be_valid

    exp2.name = 'test'
    exp2.should be_valid
  end

  it "should have a unique name and version" do
    first_exp = Exploits::Exploit.create(
      :name => 'test2',
      :version => '0.0.1'
    )
    first_exp.should be_valid

    second_exp = Exploits::Exploit.new(
      :name => 'test2',
      :version => '0.0.1'
    )
    second_exp.should_not be_valid

    third_exp = Exploits::Exploit.new(
      :name => 'test2',
      :version => '0.0.2'
    )
    third_exp.should be_valid
  end

  it "should allow for the extending of Helper modules" do
    @xploit.instance_eval { helper :padding }.should == true
  end

  it "should raise an UnknownHelper when extending an unknown helper" do
    lambda {
      @xploit.instance_eval { helper :obvious_not_there }
    }.should raise_error(Exploits::UnknownHelper)
  end

  it "should have targeted Archs" do
    @xploit.targeted_archs.should == [Arch.i686, Arch.i386]
  end

  it "should have targeted OSes" do
    @xploit.targeted_oses.should == [
      OS.linux_version('2.6.23'),
      OS.windows_version('7.1')
    ]
  end

  it "should have targeted products" do
    @xploit.targeted_products.all? { |product|
      product.name == 'ExampleWare' && product.version == '1.5'
    }.should == true
  end

  it "should allow the explicit selection of a target" do
    @xploit.select_target { |target| target.arch == Arch.i686 }

    @xploit.target.arch.should == Arch.i686
  end

  it "should have a default target" do
    @xploit.target.should_not be_nil

    @xploit.target.arch.should == Arch.i686

    @xploit.target.os.name.should == 'Linux'
    @xploit.target.os.version.should == '2.6.23'
  end

  it "should have a default targeted Arch" do
    @xploit.arch.should == Arch.i686
  end

  it "should have a default targeted OS" do
    @xploit.os.should == OS.linux_version('2.6.23')
  end

  it "should have a default targeted Product" do
    @xploit.product.name.should == 'ExampleWare'
    @xploit.product.version.should == '1.5'
  end

  it "should be able to switch between payloads" do
    @xploit.payload = 'payload1'

    @xploit.switch_payload('payload2') do
      @xploit.payload.should == 'payload2'
    end

    @xploit.payload.should == 'payload1'
  end

  it "should encode a String payload" do
    @xploit.payload = 'data'

    @xploit.encode_payload!
    @xploit.encoded_payload.should == 'data'
  end

  it "should encode a String using encoders" do
    @xploit.payload = 'data'
    @xploit.encoders << lambda { |payload| payload.upcase }

    @xploit.encode_payload!
    @xploit.encoded_payload.should == 'DATA'
  end

  it "should ignore payload encoders which return nil" do
    @xploit.payload = 'data'
    @xploit.encoders << lambda { |payload| nil }

    @xploit.encode_payload!
    @xploit.encoded_payload.should == 'data'
  end

  it "should have 'unbuilt' and 'built' states" do
    @xploit.should_not be_built
    @xploit.build!
    @xploit.should be_built
  end

  it "should return the result of the builder" do
    @xploit.build!.should == 'result'
  end

  it "should require the exploit is built before being deployed" do
    lambda { @xploit.deploy! }.should raise_error(Exploits::ExploitNotBuilt)
  end

  it "should have a default deployer method" do
    @xploit.build!

    @xploit.deploy! do |exploit|
      @xploit.should == exploit
    end
  end

  it "should return the name and the version when calling to_s" do
    @xploit.to_s.should == 'test 0.1'
  end
end
