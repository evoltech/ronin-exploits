require 'spec_helper'
require 'ronin/exploits/target'

describe Exploits::Target do
  before(:all) do
    @exploit = Exploits::Exploit.create(:name => 'exploit with targets')
  end

  before(:each) do
    @target = Exploits::Target.new(
      :params => {:var => 1, :test => 'hello'},
      :exploit => @exploit
    )
  end

  it "should not have an Arch by default" do
    @target.arch.should be_nil
  end

  it "should not have an OS by default" do
    @target.os.should be_nil
  end

  it "should not have targeted software by default" do
    @target.software.should be_nil
  end

  it "should have params" do
    @target.should be_param(:var)
    @target.should be_param(:test)
  end

  it "should contain target params" do
    @target.params[:var].should == 1
    @target.params[:test].should == 'hello'
  end

  it "should provide Hash like access to target params" do
    @target[:var].should == 1
    @target[:test].should == 'hello'
  end

  it "should be able to set params like a Hash" do
    @target[:var] = 2

    @target[:var].should == 2
  end

  it "should provide OStruct like access to target params" do
    @target.var.should == 1
    @target.test.should == 'hello'
  end

  it "should be able to set params like an OStruct" do
    @target.var = 2

    @target.var.should == 2
  end

  it "should be able to serialize and deserialize it's target params" do
    @target.save

    target = Exploits::Target.get(@target.id)
    target.should_not be_nil

    target.params[:var].should == 1
    target.params[:test].should == 'hello'
  end

  it "should not raise TargetDataMissing when setting new params" do
    lambda {
      @target.bla = 'yes'
    }.should_not raise_error(Exploits::TargetDataMissing)

    @target.bla.should == 'yes'
  end

  it "should raise TargetDataMissing when accessing non-existant params" do
    lambda {
      @target.bla
    }.should raise_error(Exploits::TargetDataMissing)
  end
end
