require 'spec_helper'
require 'ronin/vulns/web'

describe Vulns::Web do
  let(:uri) { URI.parse('http://example.com/page?id=1') }
  let(:url) { URL.from(uri) }
  let(:query_param) { 'id' }

  let(:host) { 'example.com' }
  let(:referer) { 'evil.com' }
  let(:user_agent) { 'IE' }
  let(:cookie) { 'secret' }

  let(:injection) { "'" }

  context "default" do
    subject { Vulns::Web.new(:url => url) }

    it "should not have a proxy" do
      subject.proxy.should be_nil
    end

    it "should not have any Headers" do
      subject.headers.should be_empty
    end

    it "should not have a Cookie" do
      subject.cookie.should be_nil
    end

    it "should not have a Referer URL" do
      subject.referer.should be_nil
    end

    it "should not have a User-Agent" do
      subject.user_agent.should be_nil
    end

    it "should have a normal URI" do
      uri = subject.normal_uri

      uri.should be_kind_of(URI::HTTP)
    end
  end

  describe "initialize" do
    let(:proxy) { 'example.com:8080' }
    subject do
      Vulns::Web.new(
        :url => url,
        :proxy => proxy,
        :headers => {'Host' => host},
        :referer => referer,
        :user_agent => user_agent,
        :cookie => cookie
      )
    end

    it "should allow setting the proxy" do
      subject.proxy.should_not be_nil
    end

    it "should allow setting the headers" do
      subject.headers.should_not be_empty
    end

    it "should allow setting the Referer Header" do
      subject.referer.should_not be_nil
    end

    it "should allow setting the User-Agent Header" do
      subject.user_agent.should_not be_nil
    end

    it "should allow setting the Cookie Header" do
      subject.cookie.should_not be_nil
    end
  end

  describe "normal_headers" do
    let(:vuln) do
      Vulns::Web.new(
        :url => url,
        :headers => {'Host' => host},
        :referer => referer,
        :user_agent => user_agent,
        :cookie => cookie
      )
    end

    subject { vuln.normal_headers }

    it "should not be empty" do
      subject.should_not be_empty
    end

    it "should allow custom headers" do
      subject['Host'].should == host
    end

    it "should include the referer" do
      subject['Referer'].should == referer
    end

    it "should include the user_agent" do
      subject['User-Agent'].should == user_agent
    end

    it "should include the cookie" do
      subject['Cookie'].should == cookie
    end
  end

  describe "normal_value" do
    it "may return the value of the vulnerable query-param" do
      vuln = Vulns::Web.new(:url => url, :query_param => query_param)

      vuln.normal_value.should == uri.query_params[query_param]
    end

    it "may return the value of the vulnerable header" do
      vuln = Vulns::Web.new(
        :header_name => 'Host',
        :headers => {'Host' => host}
      )

      vuln.normal_value.should == host
    end
  end

  describe "exploit_uri" do
    subject do
      Vulns::Web.new(:url => url, :query_param => query_param)
    end

    it "should inject data into the vulnerable query_param" do
      new_uri = subject.exploit_uri(injection)

      new_uri.query_params[query_param].should == injection
    end

    it "should prepend data into the vulnerable query_param" do
      new_uri = subject.exploit_uri(:prepend => injection)

      new_uri.query_params[query_param].should == "#{injection}1"
    end

    it "should append data into the vulnerable query_param" do
      new_uri = subject.exploit_uri(:append => injection)

      new_uri.query_params[query_param].should == "1#{injection}"
    end

    it "should not inject any data when given nil" do
      new_uri = subject.exploit_uri

      new_uri.should == subject.normal_uri
    end
  end

  describe "exploit_headers" do
    let(:header_name) { 'User-Agent' }

    subject do
      Vulns::Web.new(
        :url => url,
        :header_name => header_name,
        :headers => {header_name => 'IE'}
      )
    end

    it "should set the Cookie header if a cookie is set" do
      subject.cookie = 'secret'
      subject.exploit_headers['Cookie'].should == 'secret'
    end

    it "should set the Referer header if a cookie is set" do
      url = 'evil.com'

      subject.referer = url
      subject.exploit_headers['Referer'].should == url
    end

    it "should set the User-Agent header if a cookie is set" do
      browser = 'IE6'

      subject.user_agent = browser
      subject.exploit_headers['User-Agent'].should == browser
    end

    it "should inject data into the vulnerable Header" do
      new_headers = subject.exploit_headers(injection)

      new_headers[header_name].should == injection
    end

    it "should prepend data into the vulnerable query_param" do
      new_headers = subject.exploit_headers(:prepend => injection)

      new_headers[header_name].should == "#{injection}IE"
    end

    it "should append data into the vulnerable query_param" do
      new_headers = subject.exploit_headers(:append => injection)

      new_headers[header_name].should == "IE#{injection}"
    end

    it "should not inject any data when given nil" do
      new_headers = subject.exploit_headers

      new_headers.should == subject.normal_headers
    end
  end
end
