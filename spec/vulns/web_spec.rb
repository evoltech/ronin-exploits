require 'spec_helper'
require 'ronin/vulns/web'

describe Vulns::Web do
  let(:url) { 'http://example.com/page?id=1' }
  let(:injection) { "'" }

  context "default" do
    subject { Vulns::Web.new(:url => URL.parse(url)) }

    it "should not have a proxy" do
      subject.proxy.should be_nil
    end

    it "should not have any Headers" do
      subject.headers.should be_empty
    end

    it "should not have a Cookie" do
      subject.cookie.should be_nil
    end

    it "should have a targeted URI" do
      uri = subject.uri

      uri.should be_kind_of(URI::HTTP)
    end
  end

  context "initialize" do
    subject do
      Vulns::Web.new(
        :url => URL.parse(url),
        :proxy => 'example.com:8080',
        :headers => {'Referer' => 'IE'},
        :cookie => 'secret'
      )
    end

    it "should allow setting the proxy" do
      subject.proxy.should_not be_nil
    end

    it "should allow setting the headers" do
      subject.proxy.should_not be_empty
    end

    it "should allow setting the cookie" do
      subject.cookie.should_not be_nil
    end
  end

  context "query_param" do
    subject do
      Vulns::Web.new(
        :url => URL.parse(url),
        :query_param => 'id'
      )
    end

    it "should have a vulnerable query_param" do
      subject.query_param.should == 'id'
    end

    it "should inject data into the vulnerable query_param" do
      new_uri = subject.exploit_uri(injection)

      new_uri.query_params['id'].should == injection
    end

    it "should prepend data into the vulnerable query_param" do
      new_uri = subject.exploit_uri(:prepend => injection)

      new_uri.query_params['id'].should == "#{injection}1"
    end

    it "should append data into the vulnerable query_param" do
      new_uri = subject.exploit_uri(:append => injection)

      new_uri.query_params['id'].should == "1#{injection}"
    end

    it "should not inject any data when given nil" do
      new_uri = subject.exploit_uri

      new_uri.should == subject.uri
    end
  end

  context "header_name" do
    let(:header) { 'Referer' }

    subject do
      Vulns::Web.new(
        :url => URL.parse(url),
        :header_name => header,
        :headers => {header => 'IE'}
      )
    end

    it "should have a vulnerable header_name" do
      subject.header_name.should == header
    end

    it "should set the Cookie header if a cookie is set" do
      subject.cookie = 'secret'
      subject.exploit_headers['Cookie'].should == 'secret'
    end

    it "should inject data into the vulnerable Header" do
      new_headers = subject.exploit_headers(injection)

      new_headers[header].should == injection
    end

    it "should prepend data into the vulnerable query_param" do
      new_headers = subject.exploit_headers(:prepend => injection)

      new_headers[header].should == "#{injection}IE"
    end

    it "should append data into the vulnerable query_param" do
      new_headers = subject.exploit_headers(:append => injection)

      new_headers[header].should == "IE#{injection}"
    end

    it "should not inject any data when given nil" do
      new_headers = subject.exploit_headers

      new_headers.should == subject.headers
    end
  end
end
